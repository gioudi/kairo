/*! For license information please see areas.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.sample=t():e.sample=t()}(self,(function(){return(()=>{"use strict";var e={"./Scripts/Pages/Areas/Areas.ts":function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(a,n){function i(e){try{c(o.next(e))}catch(e){n(e)}}function s(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}c((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,o,a,n,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,o&&(a=2&n[0]?o.return:n[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,n[1])).done)return a;switch(o=0,a&&(n=[2&n[0],a.value]),n[0]){case 0:case 1:a=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,o=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!a||n[1]>a[0]&&n[1]<a[3])){i.label=n[1];break}if(6===n[0]&&i.label<a[1]){i.label=a[1],a=n;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(n);break}a[2]&&i.ops.pop(),i.trys.pop();continue}n=t.call(e,i)}catch(e){n=[6,e],o=0}finally{r=a=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.AreasPage=void 0;var n=r("./Scripts/Shared/index.ts"),i=r("./Scripts/Shared/Components/ConfirmModalMessage.ts"),s=r("./Scripts/Pages/Areas/GestionAreas.ts"),c=r("./Scripts/Shared/Utils/JQValidations.ts"),l=function(){function e(){this.Init()}return e.prototype.Destroy=function(){},e.prototype.Init=function(){this.InicializarButtons(),this.InicializarControls()},e.prototype.InicializarControls=function(){var e=this;this.gestionAreas=new s.AreasGestionPage(document.getElementById("area-modal")),this.gestionAreas.onAreaCreado=function(t){return e.AgregarFilaDatatable(t)},this.gestionAreas.onAreaActualizado=function(t){return e.ActualizarFilaDatatable(t)},c.JQValidations.MaxFileSizeValidation(),c.JQValidations.AllowedExtensionsValidation()},e.prototype.InicializarButtons=function(){var e=this,t=document.getElementById("card-area"),r=document.getElementById("area-add");t.on("click",".area-action",(function(t){t.target.matches(".area-edit")?e.EditarArea(t.target):t.target.matches(".area-delete")&&e.BorrarArea(t.target)})),r.addEventListener("click",(function(t){return e.CrearArea()}))},e.prototype.BorrarArea=function(e){return o(this,void 0,void 0,(function(){var t,r=this;return a(this,(function(o){switch(o.label){case 0:return t=e.dataset.areaid,[4,new i.ConfirmModalMessage("Eliminar Area","Â¿Desea eliminar el Area "+t+"?","Aceptar","Cancelar").Confirm()];case 1:return o.sent()&&(new n.HttpFetchService).Post("/Areas/BorrarArea",t).then((function(t){t.Result&&r.BorrarFilaDatatable(e),M.toast({html:t.Message,classes:t.Result?"succes":"error"})})).catch((function(e){M.toast({html:e,classes:"error"})})),[2]}}))}))},e.prototype.CrearArea=function(){this.gestionAreas.NuevaArea()},e.prototype.EditarArea=function(e){console.log(e),this.gestionAreas.DatosArea(e.dataset.areaid,!1)},e.prototype.BorrarFilaDatatable=function(e){console.log(e)},e.prototype.AgregarFilaDatatable=function(e){},e.prototype.ActualizarFilaDatatable=function(e){},e}();t.AreasPage=l;var d=new l;document.addEventListener("turbolinks:render",(function(e){-1!=document.URL.indexOf("/Areas/Index")?d?d.Init():d=new l:null==d||d.Destroy()}))},"./Scripts/Pages/Areas/GestionAreas.ts":(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AreasGestionPage=void 0;var o=r("./Scripts/Shared/index.ts"),a=r("./Scripts/Shared/Models/Area.ts"),n=function(){function e(e){this._baseUrl="/Areas",this._httpService=new o.HttpFetchService,this._modalBase=e,this.InicializarModal()}return e.prototype.NuevaArea=function(){var e=this;this._httpService.Post(this._baseUrl+"/NuevaArea",null,!1).then((function(t){e._modalBase.innerHTML=t,e.InicilizarFormArea(!0)})),this._modalInstance.open()},e.prototype.GuardarArea=function(){var e,t=this,r=null===(e=this._formData.get("RequestVerificationToken"))||void 0===e?void 0:e.toString();this._httpService.PostForm(this._baseUrl+"/CrearArea",this._formData,r).then((function(e){e.Result&&(t.LimpiarFormulario(),t.onAreaCreado&&t.onAreaCreado(t.ExtraerArea())),M.toast({html:e.Message,classes:e.Result?"succes":"error"})})).catch((function(e){return console.log(e)}))},e.prototype.DatosArea=function(e,t){var r=this,o={area:e,lectura:t};this._areaIdActualizar=e,this._httpService.Post(this._baseUrl+"/DatosArea",o,!1).then((function(e){r._modalBase.innerHTML=e,r.InicilizarFormArea(!1)})),this._modalInstance.open()},e.prototype.ActualizarArea=function(){var e,t=this,r=null===(e=this._formData.get("RequestVerificationToken"))||void 0===e?void 0:e.toString();this._formData.set("IdArea",this._areaIdActualizar),this._httpService.PostForm(this._baseUrl+"/ActualizarArea",this._formData,r).then((function(e){e.Result&&(t.onAreaActualizado&&t.onAreaActualizado(t.ExtraerArea()),t.LimpiarFormulario(),t.CerrarModal()),M.toast({html:e.Message,classes:e.Result?"succes":"error"})})).catch((function(e){return console.log(e)}))},e.prototype.InicializarModal=function(){this._modalInstance=M.Modal.init(this._modalBase,{dismissible:!1,opacity:.5,inDuration:300,outDuration:200,startingTop:"6%",endingTop:"8%"})},e.prototype.InicilizarFormArea=function(e){var t=this;M.updateTextFields(),this._formArea=document.querySelector("#area-form"),this._formData=new FormData(this._formArea),$(this._formArea).removeData("validator").removeData("unobtrusiveValidation"),$.validator.unobtrusive.parse(this._formArea),document.getElementById("area-modal-cancel").addEventListener("click",(function(e){return t.CerrarModal()})),this._formArea.onsubmit=function(r){return r.preventDefault(),$(t._formArea).valid()&&(t._formData=new FormData(t._formArea),e?t.GuardarArea():t.ActualizarArea()),!1}},e.prototype.ExtraerArea=function(){var e,t,r=new a.Area;return r.IdArea=null===(e=this._formData.get("IdArea"))||void 0===e?void 0:e.toString(),r.Nombre=null===(t=this._formData.get("Nombre"))||void 0===t?void 0:t.toString(),r},e.prototype.LimpiarFormulario=function(){this._formArea.reset(),$("#area-id").val(null).trigger("change"),M.updateTextFields()},e.prototype.CerrarModal=function(){console.log("Entra a cerrar modal"),this._modalInstance.close(),this._formArea.parentNode.removeChild(this._formArea),this._areaIdActualizar=""},e}();t.AreasGestionPage=n},"./Scripts/Shared/Components/ConfirmModalMessage.ts":function(e,t){var r=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(a,n){function i(e){try{c(o.next(e))}catch(e){n(e)}}function s(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,s)}c((o=o.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,o,a,n,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,o&&(a=2&n[0]?o.return:n[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,n[1])).done)return a;switch(o=0,a&&(n=[2&n[0],a.value]),n[0]){case 0:case 1:a=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,o=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==n[0]&&2!==n[0])){i=0;continue}if(3===n[0]&&(!a||n[1]>a[0]&&n[1]<a[3])){i.label=n[1];break}if(6===n[0]&&i.label<a[1]){i.label=a[1],a=n;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(n);break}a[2]&&i.ops.pop(),i.trys.pop();continue}n=t.call(e,i)}catch(e){n=[6,e],o=0}finally{r=a=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ConfirmModalMessage=void 0;var a=function(){function e(e,t,r,o){this.title=e,this.message=t,this.acceptText=r,this.dismissText=o,this.idMesssage="confirm-message",this.parent=document.body,this.CreateModal(),this.AppendModel()}return e.prototype.CreateModal=function(){this.modal=document.createElement("div"),this.modal.id=this.idMesssage,this.modal.classList.add("modal","modal-fixed-footer","modal-confirm-message-small");var e=document.createElement("div");e.classList.add("modal-content"),this.modal.appendChild(e);var t=document.createElement("h5");t.textContent=this.title,e.appendChild(t);var r=document.createElement("p");r.textContent=this.message,e.appendChild(r);var o=document.createElement("div");o.classList.add("modal-footer"),this.modal.appendChild(o),this.dismissButton=document.createElement("button"),this.dismissButton.classList.add("modal-action","waves-effect","waves-red","btn-flat","btn-orange"),this.dismissButton.type="button",this.dismissButton.textContent=this.dismissText,o.appendChild(this.dismissButton),this.acceptButton=document.createElement("button"),this.acceptButton.classList.add("modal-action","waves-effect","waves-red","btn-flat","btn-orange"),this.acceptButton.type="button",this.acceptButton.textContent=this.acceptText,o.appendChild(this.acceptButton)},e.prototype.AppendModel=function(){this.parent.appendChild(this.modal)},e.prototype.destroy=function(){this.modalInstance&&(this.modalInstance.close(),this.modalInstance.destroy());var e=document.querySelector("#"+this.idMesssage);e.parentNode.removeChild(e)},e.prototype.Confirm=function(){return r(this,void 0,void 0,(function(){var e=this;return o(this,(function(t){return[2,new Promise((function(t,r){(!e.modal||!e.acceptButton||!e.dismissButton)&&(e.destroy(),r("Fallo algo en la creaciÃ³n del mensaje")),M.Modal.init(e.modal,{dismissible:!1,opacity:.5,inDuration:300,outDuration:200,startingTop:"6%",endingTop:"8%"}),e.modalInstance=M.Modal.getInstance(e.modal),e.modalInstance.open(),e.acceptButton.addEventListener("click",(function(){t(!0),e.destroy()})),e.dismissButton.addEventListener("click",(function(){t(!1),e.destroy()}))}))]}))}))},e}();t.ConfirmModalMessage=a},"./Scripts/Shared/Http/HttpFetchService.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HttpFetchService=void 0;var r=function(){function e(){}return e.prototype.Post=function(e,t,r){return void 0===r&&(r=!0),new Promise((function(o,a){fetch(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){return r?e.json():e.text()})).then((function(e){o(e)})).catch((function(e){console.log(e),a(e)}))}))},e.prototype.PostForm=function(e,t,r){return new Promise((function(o,a){fetch(e,{method:"post",headers:{RequestVerificationToken:r},body:t}).then((function(e){return e.json()})).then((function(e){o(e)})).catch((function(e){console.log(e),a(e)}))}))},e.prototype.PostFormURL=function(e,t,r){return void 0===r&&(r=!0),new Promise((function(o,a){fetch(e,{method:"post",headers:{"Content-Type":"application/json"},body:t}).then((function(e){return r?e.json():e.text()})).then((function(e){o(e)})).catch((function(e){console.log(e),a(e)}))}))},e}();t.HttpFetchService=r},"./Scripts/Shared/Http/index.ts":function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.services=void 0;var n=r("./Scripts/Shared/Http/HttpFetchService.ts");t.services=[n.HttpFetchService],a(r("./Scripts/Shared/Http/HttpFetchService.ts"),t)},"./Scripts/Shared/Models/Area.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Area=void 0;t.Area=function(){}},"./Scripts/Shared/Models/Cabezote.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cabezote=void 0;t.Cabezote=function(){}},"./Scripts/Shared/Models/Conductor.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Conductor=void 0;t.Conductor=function(){}},"./Scripts/Shared/Models/Linea.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Linea=void 0;t.Linea=function(){}},"./Scripts/Shared/Models/Log.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Log=void 0;t.Log=function(){}},"./Scripts/Shared/Models/MessageResponse.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},"./Scripts/Shared/Models/Trailer.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Trailer=void 0;t.Trailer=function(){}},"./Scripts/Shared/Models/Usuario.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Usuario=void 0;t.Usuario=function(){}},"./Scripts/Shared/Models/index.ts":function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.models=void 0;var n=r("./Scripts/Shared/Models/Usuario.ts"),i=r("./Scripts/Shared/Models/Cabezote.ts"),s=r("./Scripts/Shared/Models/Trailer.ts"),c=r("./Scripts/Shared/Models/Conductor.ts"),l=r("./Scripts/Shared/Models/Area.ts"),d=r("./Scripts/Shared/Models/Log.ts"),u=r("./Scripts/Shared/Models/Linea.ts");t.models=[n.Usuario,i.Cabezote,s.Trailer,c.Conductor,l.Area,d.Log,u.Linea],a(r("./Scripts/Shared/Models/MessageResponse.ts"),t),a(r("./Scripts/Shared/Models/Usuario.ts"),t),a(r("./Scripts/Shared/Models/Cabezote.ts"),t),a(r("./Scripts/Shared/Models/Trailer.ts"),t),a(r("./Scripts/Shared/Models/Conductor.ts"),t),a(r("./Scripts/Shared/Models/Area.ts"),t),a(r("./Scripts/Shared/Models/Log.ts"),t),a(r("./Scripts/Shared/Models/Linea.ts"),t)},"./Scripts/Shared/Utils/HTMLExtensions.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),HTMLElement.prototype.on=function(e,t,r){this.addEventListener(e,(function(e){e.target.matches(t)?r(e):console.log(e.target)}))}},"./Scripts/Shared/Utils/JQValidations.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JQValidations=void 0;var r=function(){function e(){}return e.MaxFileSizeValidation=function(){$.validator.methods.maxfilesize||($.validator.addMethod("maxfilesize",(function(e,t,r){var o=r,a=t.files[0];return!(a&&a.size/1024>o)})),$.validator.unobtrusive.adapters.add("maxfilesize",["size"],(function(e){e.rules.maxfilesize=e.params.size,e.messages.maxfilesize=e.message})))},e.AllowedExtensionsValidation=function(){$.validator.methods.allowedextensions||($.validator.addMethod("allowedextensions",(function(e,t,r){var o=r,a=t.files[0],n=o.split(",");return!a||!!new RegExp("("+n.join("|").replace(/\./g,"\\.")+")$").test(e)})),$.validator.unobtrusive.adapters.add("allowedextensions",["exts"],(function(e){e.rules.allowedextensions=e.params.exts,e.messages.allowedextensions=e.message})))},e}();t.JQValidations=r},"./Scripts/Shared/index.ts":function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),a(r("./Scripts/Shared/Http/index.ts"),t),a(r("./Scripts/Shared/Models/index.ts"),t),a(r("./Scripts/Shared/Utils/HTMLExtensions.ts"),t)}},t={};return function r(o){if(t[o])return t[o].exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,r),a.exports}("./Scripts/Pages/Areas/Areas.ts")})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvUGFnZXMvQXJlYXMvQXJlYXMudHMiLCJ3ZWJwYWNrOi8vc2FtcGxlLy4vU2NyaXB0cy9QYWdlcy9BcmVhcy9HZXN0aW9uQXJlYXMudHMiLCJ3ZWJwYWNrOi8vc2FtcGxlLy4vU2NyaXB0cy9TaGFyZWQvQ29tcG9uZW50cy9Db25maXJtTW9kYWxNZXNzYWdlLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL0h0dHAvSHR0cEZldGNoU2VydmljZS50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9IdHRwL2luZGV4LnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9BcmVhLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9DYWJlem90ZS50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9Nb2RlbHMvQ29uZHVjdG9yLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9MaW5lYS50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9Nb2RlbHMvTG9nLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9UcmFpbGVyLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9Vc3VhcmlvLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9pbmRleC50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9VdGlscy9IVE1MRXh0ZW5zaW9ucy50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9VdGlscy9KUVZhbGlkYXRpb25zLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL2luZGV4LnRzIiwid2VicGFjazovL3NhbXBsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zYW1wbGUvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiSW5pdCIsIkRlc3Ryb3kiLCJJbmljaWFsaXphckJ1dHRvbnMiLCJJbmljaWFsaXphckNvbnRyb2xzIiwiZ2VzdGlvbkFyZWFzIiwiQXJlYXNHZXN0aW9uUGFnZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJvbkFyZWFDcmVhZG8iLCJhcmVhIiwiQWdyZWdhckZpbGFEYXRhdGFibGUiLCJvbkFyZWFBY3R1YWxpemFkbyIsIkFjdHVhbGl6YXJGaWxhRGF0YXRhYmxlIiwiSlFWYWxpZGF0aW9ucyIsIk1heEZpbGVTaXplVmFsaWRhdGlvbiIsIkFsbG93ZWRFeHRlbnNpb25zVmFsaWRhdGlvbiIsImNhcmQiLCJhcmVhQWRkIiwib24iLCJldmVudCIsInRhcmdldCIsIm1hdGNoZXMiLCJFZGl0YXJBcmVhIiwiQm9ycmFyQXJlYSIsImFkZEV2ZW50TGlzdGVuZXIiLCJDcmVhckFyZWEiLCJlbGVtZW50IiwiYXJlYUlkIiwiZGF0YXNldCIsImFyZWFpZCIsIkNvbmZpcm1Nb2RhbE1lc3NhZ2UiLCJDb25maXJtIiwiSHR0cEZldGNoU2VydmljZSIsIlBvc3QiLCJ0aGVuIiwiZGF0YSIsIlJlc3VsdCIsIkJvcnJhckZpbGFEYXRhdGFibGUiLCJNIiwidG9hc3QiLCJodG1sIiwiTWVzc2FnZSIsImNsYXNzZXMiLCJjYXRjaCIsImVycm9yIiwiTnVldmFBcmVhIiwiY29uc29sZSIsImxvZyIsIkRhdG9zQXJlYSIsIkFyZWFzUGFnZSIsImFyZWFzUGFnZSIsImUiLCJVUkwiLCJpbmRleE9mIiwibW9kYWxCYXNlIiwiX2Jhc2VVcmwiLCJfaHR0cFNlcnZpY2UiLCJfbW9kYWxCYXNlIiwiSW5pY2lhbGl6YXJNb2RhbCIsImlubmVySFRNTCIsIkluaWNpbGl6YXJGb3JtQXJlYSIsIl9tb2RhbEluc3RhbmNlIiwib3BlbiIsIkd1YXJkYXJBcmVhIiwidG9rZW4iLCJfZm9ybURhdGEiLCJnZXQiLCJ0b1N0cmluZyIsIlBvc3RGb3JtIiwiTGltcGlhckZvcm11bGFyaW8iLCJFeHRyYWVyQXJlYSIsImVyciIsImlkQXJlYSIsImxlY3R1cmEiLCJwYXlsb2FkIiwiX2FyZWFJZEFjdHVhbGl6YXIiLCJBY3R1YWxpemFyQXJlYSIsInNldCIsIkNlcnJhck1vZGFsIiwiTW9kYWwiLCJpbml0IiwiZGlzbWlzc2libGUiLCJvcGFjaXR5IiwiaW5EdXJhdGlvbiIsIm91dER1cmF0aW9uIiwic3RhcnRpbmdUb3AiLCJlbmRpbmdUb3AiLCJtb2RvQ3JlYWNpb24iLCJ1cGRhdGVUZXh0RmllbGRzIiwiX2Zvcm1BcmVhIiwicXVlcnlTZWxlY3RvciIsIkZvcm1EYXRhIiwiJCIsInJlbW92ZURhdGEiLCJ2YWxpZGF0b3IiLCJ1bm9idHJ1c2l2ZSIsInBhcnNlIiwiZXYiLCJvbnN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwidmFsaWQiLCJhcmVlYSIsIkFyZWEiLCJJZEFyZWEiLCJOb21icmUiLCJyZXNldCIsInZhbCIsInRyaWdnZXIiLCJjbG9zZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRpdGxlIiwibWVzc2FnZSIsImFjY2VwdFRleHQiLCJkaXNtaXNzVGV4dCIsImlkTWVzc3NhZ2UiLCJwYXJlbnQiLCJib2R5IiwiQ3JlYXRlTW9kYWwiLCJBcHBlbmRNb2RlbCIsIm1vZGFsIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiY2xhc3NMaXN0IiwiYWRkIiwiY29udGVudCIsImFwcGVuZENoaWxkIiwiaGVhZGVyIiwidGV4dENvbnRlbnQiLCJidXR0b25Hcm91cCIsImRpc21pc3NCdXR0b24iLCJ0eXBlIiwiYWNjZXB0QnV0dG9uIiwiZGVzdHJveSIsIm1vZGFsSW5zdGFuY2UiLCJlbGVtIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJnZXRJbnN0YW5jZSIsInVybCIsImpzb25SZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXNwb25zZSIsImpzb24iLCJ0ZXh0IiwiUG9zdEZvcm1VUkwiLCJzZXJ2aWNlcyIsIkNhYmV6b3RlIiwiQ29uZHVjdG9yIiwiTGluZWEiLCJMb2ciLCJUcmFpbGVyIiwiVXN1YXJpbyIsIm1vZGVscyIsIkhUTUxFbGVtZW50IiwicHJvdG90eXBlIiwiZXZlbnRUeXBlIiwiY2hpbGRTZWxlY3RvciIsImV2ZW50SGFuZGxlciIsImV2ZW50T25FbGVtZW50IiwibWV0aG9kcyIsImFkZE1ldGhvZCIsInZhbHVlIiwicGFyYW1zIiwic2l6ZSIsImZpbGUiLCJmaWxlcyIsImFkYXB0ZXJzIiwib3B0aW9ucyIsInJ1bGVzIiwibWVzc2FnZXMiLCJleHRzIiwiZXh0c0FycmF5Iiwic3BsaXQiLCJSZWdFeHAiLCJqb2luIiwicmVwbGFjZSIsInRlc3QiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCJdLCJtYXBwaW5ncyI6IjtDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBZ0IsT0FBSUQsSUFFcEJELEVBQWEsT0FBSUMsSUFSbkIsQ0FTR0ssTUFBTSxXQUNULE0sOGdEQ1ZBLHFDQUNBLDBEQUNBLDZDQUNBLCtDQUdBLGFBUUksYUFDSUMsS0FBS0MsT0E0RWIsT0F6RVcsWUFBQUMsUUFBUCxhQUlPLFlBQUFELEtBQVAsV0FDSUQsS0FBS0cscUJBQ0xILEtBQUtJLHVCQUdELFlBQUFBLG9CQUFSLHNC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QyxFQUFTNEwsRUFBeUJFLEdBQVksQ0FHakQvTCxRQUFTLElBT1YsT0FIQWdNLEVBQW9CRCxHQUFVRSxLQUFLaE0sRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBUzhMLEdBR3BFN0wsRUFBT0QsUUNqQlI4TCxDQUFvQixtQyIsImZpbGUiOiJhcmVhcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInNhbXBsZVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJzYW1wbGVcIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCJpbXBvcnQgeyBIdHRwRmV0Y2hTZXJ2aWNlLCBJTWVzc2FnZVJlc3BvbnNlLCBBcmVhIH0gZnJvbSAnLi4vLi4vU2hhcmVkJztcclxuaW1wb3J0IHsgQ29uZmlybU1vZGFsTWVzc2FnZSB9IGZyb20gJy4uLy4uL1NoYXJlZC9Db21wb25lbnRzL0NvbmZpcm1Nb2RhbE1lc3NhZ2UnO1xyXG5pbXBvcnQgeyBBcmVhc0dlc3Rpb25QYWdlIH0gZnJvbSAnLi9HZXN0aW9uQXJlYXMnO1xyXG5pbXBvcnQgeyBKUVZhbGlkYXRpb25zIH0gZnJvbSAnLi4vLi4vU2hhcmVkL1V0aWxzL0pRVmFsaWRhdGlvbnMnO1xyXG5pbXBvcnQgeyBJUGFnZSB9IGZyb20gJy4uLy4uL1NoYXJlZC9Db21wb25lbnRzL0lQYWdlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBcmVhc1BhZ2UgaW1wbGVtZW50cyBJUGFnZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBUYWJsZTogRGF0YVRhYmxlcy5BcGk7XHJcbiAgICBwcml2YXRlIG1vZGFsSW5zdGFuY2U6IE0uTW9kYWw7XHJcbiAgICBwcml2YXRlIGdlc3Rpb25BcmVhczogQXJlYXNHZXN0aW9uUGFnZTtcclxuXHJcbiAgICBCYXNlVVJMOiBcIi9BcmVhcy9JbmRleFwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuSW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEZXN0cm95KCkge1xyXG4gICAgICAgIC8vdGhpcy5UYWJsZS5kZXN0cm95KGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgSW5pdCgpIHtcclxuICAgICAgICB0aGlzLkluaWNpYWxpemFyQnV0dG9ucygpO1xyXG4gICAgICAgIHRoaXMuSW5pY2lhbGl6YXJDb250cm9scygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgSW5pY2lhbGl6YXJDb250cm9scygpIHtcclxuICAgICAgICB0aGlzLmdlc3Rpb25BcmVhcyA9IG5ldyBBcmVhc0dlc3Rpb25QYWdlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXJlYS1tb2RhbFwiKSk7XHJcbiAgICAgICAgdGhpcy5nZXN0aW9uQXJlYXMub25BcmVhQ3JlYWRvID0gKGFyZWEpID0+IHRoaXMuQWdyZWdhckZpbGFEYXRhdGFibGUoYXJlYSk7XHJcbiAgICAgICAgdGhpcy5nZXN0aW9uQXJlYXMub25BcmVhQWN0dWFsaXphZG8gPSAoYXJlYSkgPT4gdGhpcy5BY3R1YWxpemFyRmlsYURhdGF0YWJsZShhcmVhKTtcclxuICAgICAgICBKUVZhbGlkYXRpb25zLk1heEZpbGVTaXplVmFsaWRhdGlvbigpO1xyXG4gICAgICAgIEpRVmFsaWRhdGlvbnMuQWxsb3dlZEV4dGVuc2lvbnNWYWxpZGF0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBJbmljaWFsaXphckJ1dHRvbnMoKSB7XHJcbiAgICAgICAgdmFyIGNhcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcmQtYXJlYVwiKTtcclxuICAgICAgICB2YXIgYXJlYUFkZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXJlYS1hZGRcIik7XHJcblxyXG4gICAgICAgIGNhcmQub24oJ2NsaWNrJywgJy5hcmVhLWFjdGlvbicsIGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiLmFyZWEtZWRpdFwiKSlcclxuICAgICAgICAgICAgICAgIHRoaXMuRWRpdGFyQXJlYShldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCIuYXJlYS1kZWxldGVcIikpXHJcbiAgICAgICAgICAgICAgICB0aGlzLkJvcnJhckFyZWEoZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcmVhQWRkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4gdGhpcy5DcmVhckFyZWEoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBCb3JyYXJBcmVhKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IGFyZWFJZCA9IGVsZW1lbnQuZGF0YXNldC5hcmVhaWQ7XHJcbiAgICAgICAgY29uc3QgY29uZmlybSA9IG5ldyBDb25maXJtTW9kYWxNZXNzYWdlKFwiRWxpbWluYXIgQXJlYVwiLCBcIsK/RGVzZWEgZWxpbWluYXIgZWwgQXJlYSBcIiArIGFyZWFJZCArIFwiP1wiLCBcIkFjZXB0YXJcIiwgXCJDYW5jZWxhclwiKTtcclxuICAgICAgICBjb25zdCBzaG91bGREZWxldGUgPSBhd2FpdCBjb25maXJtLkNvbmZpcm0oKTtcclxuICAgICAgICBpZiAoc2hvdWxkRGVsZXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBTZXJ2aWNlID0gbmV3IEh0dHBGZXRjaFNlcnZpY2UoKTtcclxuICAgICAgICAgICAgaHR0cFNlcnZpY2UuUG9zdDxJTWVzc2FnZVJlc3BvbnNlPignL0FyZWFzL0JvcnJhckFyZWEnLCBhcmVhSWQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLlJlc3VsdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Cb3JyYXJGaWxhRGF0YXRhYmxlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIE0udG9hc3QoeyBodG1sOiBkYXRhLk1lc3NhZ2UsIGNsYXNzZXM6IChkYXRhLlJlc3VsdCkgPyBcInN1Y2Nlc1wiIDogXCJlcnJvclwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIE0udG9hc3QoeyBodG1sOiBlcnJvciwgY2xhc3NlczogXCJlcnJvclwiIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQ3JlYXJBcmVhKCkge1xyXG4gICAgICAgIHRoaXMuZ2VzdGlvbkFyZWFzLk51ZXZhQXJlYSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgRWRpdGFyQXJlYShlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuZ2VzdGlvbkFyZWFzLkRhdG9zQXJlYShlbGVtZW50LmRhdGFzZXQuYXJlYWlkLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9GdW5jaW9uIHBhcmEgYm9ycmFyIGFyZWFcclxuICAgIHByaXZhdGUgQm9ycmFyRmlsYURhdGF0YWJsZShlbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGFncmVnYXIgdW5hIG51ZXZhIGFyZWFcclxuICAgIHByaXZhdGUgQWdyZWdhckZpbGFEYXRhdGFibGUoYXJlYTogQXJlYSkge1xyXG4gICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFjdHVhbGl6YXIgdW4gYXJlYVxyXG4gICAgcHJpdmF0ZSBBY3R1YWxpemFyRmlsYURhdGF0YWJsZShhcmVhOiBBcmVhKSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG52YXIgYXJlYXNQYWdlID0gbmV3IEFyZWFzUGFnZSgpO1xyXG5cclxuXHJcblxyXG4vLyBDYWxsZWQgYWZ0ZXIgZXZlcnkgbm9uLWluaXRpYWwgcGFnZSBsb2FkXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3R1cmJvbGlua3M6cmVuZGVyJywgKGU6IGFueSkgPT4ge1xyXG4gICAgaWYgKGRvY3VtZW50LlVSTC5pbmRleE9mKCcvQXJlYXMvSW5kZXgnKSAhPSAtMSkge1xyXG4gICAgICAgIGlmIChhcmVhc1BhZ2UpIHtcclxuICAgICAgICAgICAgYXJlYXNQYWdlLkluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFyZWFzUGFnZSA9IG5ldyBBcmVhc1BhZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhlLmRhdGEudXJsKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICBhcmVhc1BhZ2U/LkRlc3Ryb3koKTtcclxufSk7IiwiXHJcbmltcG9ydCB7IEh0dHBGZXRjaFNlcnZpY2UsIElNZXNzYWdlUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9TaGFyZWQnO1xyXG5pbXBvcnQgeyBBcmVhIH0gZnJvbSAnLi4vLi4vU2hhcmVkL01vZGVscy9BcmVhJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBcmVhc0dlc3Rpb25QYWdlIHtcclxuXHJcbiAgICAvL1BST1BJRURBREVTXHJcbiAgICBwdWJsaWMgb25BcmVhQ3JlYWRvPzogKGFyZWE6IEFyZWEpID0+IHZvaWQ7XHJcbiAgICBwdWJsaWMgb25BcmVhQWN0dWFsaXphZG8/OiAoYXJlYTogQXJlYSkgPT4gdm9pZDtcclxuXHJcbiAgICAvL0NBTVBPU1xyXG4gICAgcHJpdmF0ZSBfYmFzZVVybCA9IFwiL0FyZWFzXCI7XHJcbiAgICBwcml2YXRlIF9odHRwU2VydmljZTogSHR0cEZldGNoU2VydmljZTtcclxuICAgIHByaXZhdGUgX21vZGFsSW5zdGFuY2U6IE0uTW9kYWw7XHJcbiAgICBwcml2YXRlIF9tb2RhbEJhc2U6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBfZm9ybUFyZWE6IEhUTUxGb3JtRWxlbWVudDtcclxuICAgIHByaXZhdGUgX2Zvcm1EYXRhOiBGb3JtRGF0YTtcclxuICAgIHByaXZhdGUgX2FyZWFJZEFjdHVhbGl6YXI6IHN0cmluZztcclxuXHJcbiAgICAvL0NPTlNUUlVDVE9SXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2RhbEJhc2U6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5faHR0cFNlcnZpY2UgPSBuZXcgSHR0cEZldGNoU2VydmljZSgpO1xyXG4gICAgICAgIHRoaXMuX21vZGFsQmFzZSA9IG1vZGFsQmFzZTtcclxuICAgICAgICB0aGlzLkluaWNpYWxpemFyTW9kYWwoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL01FVE9ET1NcclxuXHJcbiAgICAvL0NyZWFjaW9uIGRlIG51ZXZhIGFyZWFcclxuICAgIHB1YmxpYyBOdWV2YUFyZWEoKSB7XHJcbiAgICAgICAgdGhpcy5faHR0cFNlcnZpY2UuUG9zdDxzdHJpbmc+KHRoaXMuX2Jhc2VVcmwgKyBcIi9OdWV2YUFyZWFcIiwgbnVsbCwgZmFsc2UpXHJcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RhbEJhc2UuaW5uZXJIVE1MID0gZGF0YTtcclxuICAgICAgICAgICAgICAgIHRoaXMuSW5pY2lsaXphckZvcm1BcmVhKHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fbW9kYWxJbnN0YW5jZS5vcGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9HdWFyZGFyIEFyZWFcclxuICAgIHByaXZhdGUgR3VhcmRhckFyZWEoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRva2VuID0gdGhpcy5fZm9ybURhdGEuZ2V0KFwiUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuXCIpPy50b1N0cmluZygpO1xyXG4gICAgICAgIHRoaXMuX2h0dHBTZXJ2aWNlLlBvc3RGb3JtPElNZXNzYWdlUmVzcG9uc2U+KHRoaXMuX2Jhc2VVcmwgKyBcIi9DcmVhckFyZWFcIiwgdGhpcy5fZm9ybURhdGEsIHRva2VuKVxyXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5MaW1waWFyRm9ybXVsYXJpbygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uQXJlYUNyZWFkbylcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkFyZWFDcmVhZG8odGhpcy5FeHRyYWVyQXJlYSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIE0udG9hc3QoeyBodG1sOiBkYXRhLk1lc3NhZ2UsIGNsYXNzZXM6IChkYXRhLlJlc3VsdCkgPyBcInN1Y2Nlc1wiIDogXCJlcnJvclwiIH0pO1xyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vRWRpY2lvbiB5IGRldGFsbGVzIGRlIGFyZWFcclxuICAgIHB1YmxpYyBEYXRvc0FyZWEoaWRBcmVhOiBzdHJpbmcsIGxlY3R1cmE6IGJvb2xlYW4pIHtcclxuICAgICAgICB2YXIgcGF5bG9hZCA9IHsgYXJlYTogaWRBcmVhLCBsZWN0dXJhOiBsZWN0dXJhIH07XHJcbiAgICAgICAgdGhpcy5fYXJlYUlkQWN0dWFsaXphciA9IGlkQXJlYTtcclxuICAgICAgICB0aGlzLl9odHRwU2VydmljZS5Qb3N0PHN0cmluZz4odGhpcy5fYmFzZVVybCArIFwiL0RhdG9zQXJlYVwiLCBwYXlsb2FkLCBmYWxzZSlcclxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGFsQmFzZS5pbm5lckhUTUwgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5JbmljaWxpemFyRm9ybUFyZWEoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fbW9kYWxJbnN0YW5jZS5vcGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9BY3R1YWxpemFyIGFyZWFcclxuICAgIHByaXZhdGUgQWN0dWFsaXphckFyZWEoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRva2VuID0gdGhpcy5fZm9ybURhdGEuZ2V0KFwiUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuXCIpPy50b1N0cmluZygpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1EYXRhLnNldChcIklkQXJlYVwiLCB0aGlzLl9hcmVhSWRBY3R1YWxpemFyKTtcclxuICAgICAgICB0aGlzLl9odHRwU2VydmljZS5Qb3N0Rm9ybTxJTWVzc2FnZVJlc3BvbnNlPih0aGlzLl9iYXNlVXJsICsgXCIvQWN0dWFsaXphckFyZWFcIiwgdGhpcy5fZm9ybURhdGEsIHRva2VuKVxyXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25BcmVhQWN0dWFsaXphZG8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25BcmVhQWN0dWFsaXphZG8odGhpcy5FeHRyYWVyQXJlYSgpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkxpbXBpYXJGb3JtdWxhcmlvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5DZXJyYXJNb2RhbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgTS50b2FzdCh7IGh0bWw6IGRhdGEuTWVzc2FnZSwgY2xhc3NlczogKGRhdGEuUmVzdWx0KSA/IFwic3VjY2VzXCIgOiBcImVycm9yXCIgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuICAgIH1cclxuXHJcbiAgICAvL0luaWNpYWxpemFyIGNvbnRyb2wgbW9kYWxcclxuICAgIHByaXZhdGUgSW5pY2lhbGl6YXJNb2RhbCgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fbW9kYWxJbnN0YW5jZSA9IE0uTW9kYWwuaW5pdCh0aGlzLl9tb2RhbEJhc2UsIHtcclxuICAgICAgICAgICAgZGlzbWlzc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBvcGFjaXR5OiAuNSxcclxuICAgICAgICAgICAgaW5EdXJhdGlvbjogMzAwLFxyXG4gICAgICAgICAgICBvdXREdXJhdGlvbjogMjAwLFxyXG4gICAgICAgICAgICBzdGFydGluZ1RvcDogJzYlJyxcclxuICAgICAgICAgICAgZW5kaW5nVG9wOiAnOCUnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vSW5pY2lhbGl6YXIgY29udHJvbGVzIGRlIGZvcm11bGFyaW9cclxuICAgIHByaXZhdGUgSW5pY2lsaXphckZvcm1BcmVhKG1vZG9DcmVhY2lvbjogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIE0udXBkYXRlVGV4dEZpZWxkcygpO1xyXG5cclxuICAgICAgICB0aGlzLl9mb3JtQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYXJlYS1mb3JtXCIpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRoaXMuX2Zvcm1BcmVhKTtcclxuICAgICAgICAkKHRoaXMuX2Zvcm1BcmVhKS5yZW1vdmVEYXRhKFwidmFsaWRhdG9yXCIpLnJlbW92ZURhdGEoXCJ1bm9idHJ1c2l2ZVZhbGlkYXRpb25cIik7XHJcbiAgICAgICAgJC52YWxpZGF0b3IudW5vYnRydXNpdmUucGFyc2UodGhpcy5fZm9ybUFyZWEpO1xyXG4gICAgICAgIC8vdGhpcy5Db25maWd1cmFyQnVzcXVlZGFVc3VhcmlvKCk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcmVhLW1vZGFsLWNhbmNlbFwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4gdGhpcy5DZXJyYXJNb2RhbCgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZm9ybUFyZWEub25zdWJtaXQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJCh0aGlzLl9mb3JtQXJlYSkudmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcy5fZm9ybUFyZWEpO1xyXG4gICAgICAgICAgICAgICAgLy9mb3JtRGF0YS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7IGNvbnNvbGUubG9nKGtleSArIFwiOiBcIiArIHZhbHVlKSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kb0NyZWFjaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuR3VhcmRhckFyZWEoKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkFjdHVhbGl6YXJBcmVhKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gcHJldmVudCByZWxvYWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vRXh0cmFlciBhcmVhIGRlIGZvcm11bGFyaW9cclxuICAgIHByaXZhdGUgRXh0cmFlckFyZWEoKTogQXJlYSB7XHJcbiAgICAgICAgbGV0IGFyZWVhID0gbmV3IEFyZWEoKTtcclxuXHJcbiAgICAgICAgYXJlZWEuSWRBcmVhID0gdGhpcy5fZm9ybURhdGEuZ2V0KFwiSWRBcmVhXCIpPy50b1N0cmluZygpO1xyXG4gICAgICAgIGFyZWVhLk5vbWJyZSA9IHRoaXMuX2Zvcm1EYXRhLmdldChcIk5vbWJyZVwiKT8udG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFyZWVhO1xyXG4gICAgfVxyXG5cclxuICAgIC8vUmVzZXQgZGUgZm9ybXVsYXJpb1xyXG4gICAgcHJpdmF0ZSBMaW1waWFyRm9ybXVsYXJpbygpIHtcclxuICAgICAgICB0aGlzLl9mb3JtQXJlYS5yZXNldCgpO1xyXG4gICAgICAgICQoJyNhcmVhLWlkJykudmFsKG51bGwpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgIE0udXBkYXRlVGV4dEZpZWxkcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQ2VycmFyIGNvbnRyb2wgbW9kYWxcclxuICAgIHByaXZhdGUgQ2VycmFyTW9kYWwoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0VudHJhIGEgY2VycmFyIG1vZGFsJyk7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1BcmVhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fZm9ybUFyZWEpO1xyXG4gICAgICAgIHRoaXMuX2FyZWFJZEFjdHVhbGl6YXIgPSBcIlwiO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIENvbmZpcm1Nb2RhbE1lc3NhZ2Uge1xyXG5cclxuICAgIHByaXZhdGUgcGFyZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgbW9kYWw6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBhY2NlcHRCdXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBkaXNtaXNzQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByaXZhdGUgbW9kYWxJbnN0YW5jZTogTS5Nb2RhbDtcclxuICAgIHByaXZhdGUgaWRNZXNzc2FnZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0aXRsZTogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcsXHJcbiAgICAgICAgcHVibGljIGFjY2VwdFRleHQ6IHN0cmluZyxcclxuICAgICAgICBwdWJsaWMgZGlzbWlzc1RleHQ6IHN0cmluZykge1xyXG5cclxuICAgICAgICB0aGlzLmlkTWVzc3NhZ2UgPSBcImNvbmZpcm0tbWVzc2FnZVwiO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gZG9jdW1lbnQuYm9keTtcclxuICAgICAgICB0aGlzLkNyZWF0ZU1vZGFsKCk7XHJcbiAgICAgICAgdGhpcy5BcHBlbmRNb2RlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQ3JlYXRlTW9kYWwoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5tb2RhbC5pZCA9IHRoaXMuaWRNZXNzc2FnZTtcclxuICAgICAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbFwiLCBcIm1vZGFsLWZpeGVkLWZvb3RlclwiLCBcIm1vZGFsLWNvbmZpcm0tbWVzc2FnZS1zbWFsbFwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgY29udGVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWwtY29udGVudFwiKTtcclxuICAgICAgICB0aGlzLm1vZGFsLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDVcIik7XHJcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gdGhpcy50aXRsZTtcclxuICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGhlYWRlcik7XHJcblxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBtZXNzYWdlLnRleHRDb250ZW50ID0gdGhpcy5tZXNzYWdlO1xyXG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobWVzc2FnZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBidXR0b25Hcm91cC5jbGFzc0xpc3QuYWRkKFwibW9kYWwtZm9vdGVyXCIpO1xyXG4gICAgICAgIHRoaXMubW9kYWwuYXBwZW5kQ2hpbGQoYnV0dG9uR3JvdXApO1xyXG5cclxuICAgICAgICB0aGlzLmRpc21pc3NCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuZGlzbWlzc0J1dHRvbi5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICAgICAgICBcIm1vZGFsLWFjdGlvblwiLFxyXG4gICAgICAgICAgICBcIndhdmVzLWVmZmVjdFwiLFxyXG4gICAgICAgICAgICBcIndhdmVzLXJlZFwiLFxyXG4gICAgICAgICAgICBcImJ0bi1mbGF0XCIsXHJcbiAgICAgICAgICAgIFwiYnRuLW9yYW5nZVwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmRpc21pc3NCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XHJcbiAgICAgICAgdGhpcy5kaXNtaXNzQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5kaXNtaXNzVGV4dDtcclxuICAgICAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZCh0aGlzLmRpc21pc3NCdXR0b24pO1xyXG5cclxuICAgICAgICB0aGlzLmFjY2VwdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgdGhpcy5hY2NlcHRCdXR0b24uY2xhc3NMaXN0LmFkZChcclxuICAgICAgICAgICAgXCJtb2RhbC1hY3Rpb25cIixcclxuICAgICAgICAgICAgXCJ3YXZlcy1lZmZlY3RcIixcclxuICAgICAgICAgICAgXCJ3YXZlcy1yZWRcIixcclxuICAgICAgICAgICAgXCJidG4tZmxhdFwiLFxyXG4gICAgICAgICAgICBcImJ0bi1vcmFuZ2VcIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5hY2NlcHRCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XHJcbiAgICAgICAgdGhpcy5hY2NlcHRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLmFjY2VwdFRleHQ7XHJcbiAgICAgICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5hY2NlcHRCdXR0b24pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQXBwZW5kTW9kZWwoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5tb2RhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxJbnN0YW5jZS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyB0aGlzLmlkTWVzc3NhZ2UpO1xyXG4gICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgQ29uZmlybSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc29tZXRoaW5nV2VudFdyb25nVXBvbkNyZWF0aW9uID1cclxuICAgICAgICAgICAgICAgICF0aGlzLm1vZGFsIHx8ICF0aGlzLmFjY2VwdEJ1dHRvbiB8fCAhdGhpcy5kaXNtaXNzQnV0dG9uO1xyXG4gICAgICAgICAgICBpZiAoc29tZXRoaW5nV2VudFdyb25nVXBvbkNyZWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIkZhbGxvIGFsZ28gZW4gbGEgY3JlYWNpw7NuIGRlbCBtZW5zYWplXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBNLk1vZGFsLmluaXQodGhpcy5tb2RhbCwge1xyXG4gICAgICAgICAgICAgICAgZGlzbWlzc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogLjUsXHJcbiAgICAgICAgICAgICAgICBpbkR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgICAgICAgICBvdXREdXJhdGlvbjogMjAwLFxyXG4gICAgICAgICAgICAgICAgc3RhcnRpbmdUb3A6ICc2JScsXHJcbiAgICAgICAgICAgICAgICBlbmRpbmdUb3A6ICc4JSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxJbnN0YW5jZSA9IE0uTW9kYWwuZ2V0SW5zdGFuY2UodGhpcy5tb2RhbCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxJbnN0YW5jZS5vcGVuKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFjY2VwdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlzbWlzc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCIvLyBCYXNlIGNsYXNzIGZvciBIdHRwIG9wZXJhdGlvbnMgR0VULCBQVVQsIFBPU1QsIERFTEVURSwgUEFUQ0ghIVxyXG5leHBvcnQgY2xhc3MgSHR0cEZldGNoU2VydmljZSB7XHJcblxyXG4gICAgcHVibGljIFBvc3Q8VT4odXJsOiBzdHJpbmcsIHBheWxvYWQ6IGFueSwganNvblJlc3BvbnNlID0gdHJ1ZSk6IFByb21pc2U8VT4ge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxVPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiAoanNvblJlc3BvbnNlKSA/IHJlc3BvbnNlLmpzb24oKSA6IHJlc3BvbnNlLnRleHQoKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFBvc3RGb3JtPFU+KHVybDogc3RyaW5nLCBwYXlsb2FkOiBhbnksIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPFU+IHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8VT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuJzogdG9rZW59LFxyXG4gICAgICAgICAgICAgICAgYm9keTogcGF5bG9hZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUG9zdEZvcm1VUkw8VT4odXJsOiBzdHJpbmcsIHBheWxvYWQ6IGFueSwganNvblJlc3BvbnNlID0gdHJ1ZSk6IFByb21pc2U8VT4ge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxVPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IHBheWxvYWRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IChqc29uUmVzcG9uc2UpID8gcmVzcG9uc2UuanNvbigpIDogcmVzcG9uc2UudGV4dCgpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEh0dHBGZXRjaFNlcnZpY2UgfSBmcm9tIFwiLi9IdHRwRmV0Y2hTZXJ2aWNlXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VydmljZXMgPSBbSHR0cEZldGNoU2VydmljZV07XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9IdHRwRmV0Y2hTZXJ2aWNlXCI7IiwiZXhwb3J0IGNsYXNzIEFyZWEge1xyXG4gICAgSWRBcmVhOiBzdHJpbmc7XHJcbiAgICBOb21icmU6IHN0cmluZztcclxufSIsImV4cG9ydCBjbGFzcyBDYWJlem90ZSB7XHJcbiAgICBQbGFjYTogc3RyaW5nO1xyXG59IiwiZXhwb3J0IGNsYXNzIENvbmR1Y3RvciB7XHJcbiAgICBOb21icmU6IHN0cmluZztcclxuICAgIENlZHVsYTogc3RyaW5nO1xyXG59IiwiZXhwb3J0IGNsYXNzIExpbmVhIHtcclxuICAgIExpbmVhOiBzdHJpbmc7XHJcbiAgICBUZXJtaW5hbDogc3RyaW5nO1xyXG4gICAgUHJvZHVjdG86IHN0cmluZztcclxuICAgIEVzdGFkbzogc3RyaW5nO1xyXG4gICAgVm9sdW1lbjogbnVtYmVyO1xyXG4gICAgRGVuc2lkYWQ6IG51bWJlcjtcclxuICAgIE9ic2VydmFjaW9uZXM6IHN0cmluZztcclxufSIsImV4cG9ydCBjbGFzcyBMb2cge1xyXG4gICAgSWQ6IHN0cmluZztcclxuICAgIEZlY2hhRXZlbnRvOiBzdHJpbmc7XHJcbiAgICBBcGxpY2FjaW9uOiBzdHJpbmdcclxuICAgIEFyZWE6IHN0cmluZ1xyXG4gICAgU2VjY2lvbjogc3RyaW5nXHJcbiAgICBBY2Npb246IHN0cmluZ1xyXG4gICAgT2JqZXRpdm86IHN0cmluZ1xyXG4gICAgRW50aWRhZDogc3RyaW5nXHJcbiAgICBQcmlvcmlkYWQ6IHN0cmluZ1xyXG4gICAgQ29tZW50YXJpbzogc3RyaW5nXHJcbn0iLCJleHBvcnQgY2xhc3MgVHJhaWxlciB7XHJcbiAgICBQbGFjYTogc3RyaW5nO1xyXG59IiwiZXhwb3J0IGNsYXNzIFVzdWFyaW8ge1xyXG4gICAgSW1hZ2VuOiBGaWxlO1xyXG4gICAgSWRVc3VhcmlvOiBzdHJpbmc7XHJcbiAgICBOb21icmU6IHN0cmluZztcclxuICAgIFJvbDogc3RyaW5nO1xyXG4gICAgRW1haWw6IHN0cmluZztcclxuICAgIFRlbGVmb25vOiBzdHJpbmc7XHJcbn0iLCJpbXBvcnQgeyBJTWVzc2FnZVJlc3BvbnNlIH0gZnJvbSBcIi4vTWVzc2FnZVJlc3BvbnNlXCI7XHJcbmltcG9ydCB7IFVzdWFyaW8gfSBmcm9tIFwiLi9Vc3VhcmlvXCI7XHJcbmltcG9ydCB7IENhYmV6b3RlIH0gZnJvbSBcIi4vQ2FiZXpvdGVcIjtcclxuaW1wb3J0IHsgVHJhaWxlciB9IGZyb20gXCIuL1RyYWlsZXJcIjtcclxuaW1wb3J0IHsgQ29uZHVjdG9yIH0gZnJvbSBcIi4vQ29uZHVjdG9yXCI7XHJcbmltcG9ydCB7IEFyZWEgfSBmcm9tIFwiLi9BcmVhXCI7XHJcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuL0xvZ1wiO1xyXG5pbXBvcnQgeyBMaW5lYSB9IGZyb20gXCIuL0xpbmVhXCI7XHJcblxyXG5leHBvcnQgY29uc3QgbW9kZWxzID0gW1VzdWFyaW8sIENhYmV6b3RlLCBUcmFpbGVyLCBDb25kdWN0b3IsIEFyZWEsIExvZywgTGluZWFdO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vTWVzc2FnZVJlc3BvbnNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1VzdWFyaW9cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vQ2FiZXpvdGVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vVHJhaWxlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9Db25kdWN0b3JcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vQXJlYVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9Mb2dcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vTGluZWFcIjsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIG9uKGV2ZW50VHlwZTogc3RyaW5nLCBjaGlsZFNlbGVjdG9yOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogYW55KTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuSFRNTEVsZW1lbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50VHlwZTogc3RyaW5nLCBjaGlsZFNlbGVjdG9yOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudE9uRWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50T25FbGVtZW50LnRhcmdldC5tYXRjaGVzKGNoaWxkU2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudE9uRWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnRPbkVsZW1lbnQudGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgeyB9OyIsImV4cG9ydCBjbGFzcyBKUVZhbGlkYXRpb25zIHtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIE1heEZpbGVTaXplVmFsaWRhdGlvbigpOiB2b2lkIHtcclxuICAgICAgICBpZiAoJC52YWxpZGF0b3IubWV0aG9kc1snbWF4ZmlsZXNpemUnXSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAkLnZhbGlkYXRvci5hZGRNZXRob2QoJ21heGZpbGVzaXplJywgZnVuY3Rpb24gKHZhbHVlLCBlbGVtZW50LCBwYXJhbXMpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0ID0gKGVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIGxldCBzaXplID0gcGFyYW1zLCBmaWxlID0gKGlucHV0LmZpbGVzWzBdIGFzIEZpbGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoZmlsZS5zaXplIC8gMTAyNCkgPiBzaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkLnZhbGlkYXRvci51bm9idHJ1c2l2ZS5hZGFwdGVycy5hZGQoJ21heGZpbGVzaXplJywgWydzaXplJ10sIGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZWdpc3RyYSBtYXhmaWxlc2l6ZSBlbiB1bm9idHJ1c2l2ZVwiKTtcclxuICAgICAgICAgICAgb3B0aW9ucy5ydWxlc1snbWF4ZmlsZXNpemUnXSA9IG9wdGlvbnMucGFyYW1zWydzaXplJ107XHJcbiAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZXNbJ21heGZpbGVzaXplJ10gPSBvcHRpb25zLm1lc3NhZ2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBBbGxvd2VkRXh0ZW5zaW9uc1ZhbGlkYXRpb24oKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCQudmFsaWRhdG9yLm1ldGhvZHNbJ2FsbG93ZWRleHRlbnNpb25zJ10pXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgJC52YWxpZGF0b3IuYWRkTWV0aG9kKCdhbGxvd2VkZXh0ZW5zaW9ucycsIGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCwgcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dCA9IChlbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgICAgICBsZXQgZXh0cyA9IHBhcmFtcywgZmlsZSA9IChpbnB1dC5maWxlc1swXSBhcyBGaWxlKTtcclxuICAgICAgICAgICAgbGV0IGV4dHNBcnJheSA9IGV4dHMuc3BsaXQoJywnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKG5ldyBSZWdFeHAoJygnICsgZXh0c0FycmF5LmpvaW4oJ3wnKS5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJykgKyAnKSQnKSkudGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJC52YWxpZGF0b3IudW5vYnRydXNpdmUuYWRhcHRlcnMuYWRkKCdhbGxvd2VkZXh0ZW5zaW9ucycsIFsnZXh0cyddLCBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBvcHRpb25zLnJ1bGVzWydhbGxvd2VkZXh0ZW5zaW9ucyddID0gb3B0aW9ucy5wYXJhbXNbJ2V4dHMnXTtcclxuICAgICAgICAgICAgb3B0aW9ucy5tZXNzYWdlc1snYWxsb3dlZGV4dGVuc2lvbnMnXSA9IG9wdGlvbnMubWVzc2FnZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImV4cG9ydCAqIGZyb20gJy4vSHR0cCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vTW9kZWxzJztcclxuZXhwb3J0ICogZnJvbSAnLi9VdGlscy9IVE1MRXh0ZW5zaW9ucyc7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vU2NyaXB0cy9QYWdlcy9BcmVhcy9BcmVhcy50c1wiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=