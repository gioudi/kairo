/*! For license information please see trailers.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.sample=t():e.sample=t()}(self,(function(){return(()=>{"use strict";var e={"./Scripts/Pages/Trailers/GestionTrailers.ts":(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TrailersGestionPage=void 0;var o=r("./Scripts/Shared/index.ts"),i=r("./Scripts/Shared/Models/Trailer.ts"),n=function(){function e(e){this._baseUrl="/Trailers",this._httpService=new o.HttpFetchService,this._modalBase=e,this.InicializarModal()}return e.prototype.NuevoTrailer=function(){var e=this;this._httpService.Post(this._baseUrl+"/NuevoTrailer",null,!1).then((function(t){e._modalBase.innerHTML=t,e.InicilizarFormTrailer()})),this._modalInstance.open()},e.prototype.GuardarTrailer=function(){var e,t=this,r=null===(e=this._formData.get("RequestVerificationToken"))||void 0===e?void 0:e.toString();this._httpService.PostForm(this._baseUrl+"/CrearTrailer",this._formData,r).then((function(e){e.Result&&(t.LimpiarFormulario(),t.onTrailerCreado&&t.onTrailerCreado(t.ExtraerTrailer())),M.toast({html:e.Message,classes:e.Result?"succes":"error"})})).catch((function(e){return console.log(e)}))},e.prototype.InicializarModal=function(){this._modalInstance=M.Modal.init(this._modalBase,{dismissible:!1,opacity:.5,inDuration:300,outDuration:200,startingTop:"6%",endingTop:"8%"})},e.prototype.InicilizarFormTrailer=function(){var e=this;M.updateTextFields(),this._formTrailer=document.querySelector("#trailer-form"),this._formData=new FormData(this._formTrailer),$(this._formTrailer).removeData("validator").removeData("unobtrusiveValidation"),$.validator.unobtrusive.parse(this._formTrailer),document.getElementById("trailer-modal-cancel").addEventListener("click",(function(t){return e.CerrarModal()})),this._formTrailer.onsubmit=function(t){return t.preventDefault(),$(e._formTrailer).valid()&&(e._formData=new FormData(e._formTrailer),e.GuardarTrailer()),!1}},e.prototype.ExtraerTrailer=function(){var e,t=new i.Trailer;return t.Placa=null===(e=this._formData.get("Placa"))||void 0===e?void 0:e.toString(),t},e.prototype.LimpiarFormulario=function(){this._formTrailer.reset(),$("#trailer-id").val(null).trigger("change"),M.updateTextFields()},e.prototype.CerrarModal=function(){this._modalInstance.close(),this._formTrailer.parentNode.removeChild(this._formTrailer)},e}();t.TrailersGestionPage=n},"./Scripts/Pages/Trailers/Trailers.ts":function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(i,n){function a(e){try{l(o.next(e))}catch(e){n(e)}}function s(e){try{l(o.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,o,i,n,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,o&&(i=2&n[0]?o.return:n[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,n[1])).done)return i;switch(o=0,i&&(n=[2&n[0],i.value]),n[0]){case 0:case 1:i=n;break;case 4:return a.label++,{value:n[1],done:!1};case 5:a.label++,o=n[1],n=[0];continue;case 7:n=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==n[0]&&2!==n[0])){a=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){a.label=n[1];break}if(6===n[0]&&a.label<i[1]){a.label=i[1],i=n;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(n);break}i[2]&&a.ops.pop(),a.trys.pop();continue}n=t.call(e,a)}catch(e){n=[6,e],o=0}finally{r=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.TrailersPage=void 0;var n=r("./Scripts/Shared/index.ts"),a=r("./Scripts/Shared/Components/ConfirmModalMessage.ts"),s=r("./Scripts/Shared/Components/ConfigureDataTable.ts"),l=r("./Scripts/Pages/Trailers/GestionTrailers.ts"),c=r("./Scripts/Shared/Utils/JQValidations.ts"),d=function(){function e(){this.Init()}return e.prototype.Destroy=function(){this.Table.destroy(!1)},e.prototype.Init=function(){this.InicializarButtons(),this.InicializarControls()},e.prototype.InicializarControls=function(){var e=this;this.Table=(new s.ConfigureDataTable).Configure("#data-table-trailer",[{width:"50%",targets:0}]),this.gestionTrailers=new l.TrailersGestionPage(document.getElementById("trailer-modal")),this.gestionTrailers.onTrailerCreado=function(t){return e.AgregarFilaDatatable(t)},c.JQValidations.MaxFileSizeValidation(),c.JQValidations.AllowedExtensionsValidation()},e.prototype.InicializarButtons=function(){var e=this,t=document.getElementById("data-table-trailer"),r=document.getElementById("trailer-add");t.on("click",".trailer-action",(function(t){t.target.matches(".trailer-delete")&&e.BorrarTrailer(t.target)})),r.addEventListener("click",(function(t){return e.CrearTrailer()}))},e.prototype.BorrarTrailer=function(e){return o(this,void 0,void 0,(function(){var t,r=this;return i(this,(function(o){switch(o.label){case 0:return t=e.dataset.trailerid,[4,new a.ConfirmModalMessage("Eliminar Trailer","¿Desea eliminar el Trailer "+t+"?","Aceptar","Cancelar").Confirm()];case 1:return o.sent()&&(new n.HttpFetchService).Post("/Trailers/BorrarTrailer",t).then((function(t){t.Result&&r.BorrarFilaDatatable(e),M.toast({html:t.Message,classes:t.Result?"succes":"error"})})).catch((function(e){M.toast({html:e,classes:"error"})})),[2]}}))}))},e.prototype.CrearTrailer=function(){this.gestionTrailers.NuevoTrailer()},e.prototype.BorrarFilaDatatable=function(e){var t=$(e).closest("tr");if(t.prev().hasClass("parent")){var r=this.Table.row(t.prev());r.remove(),r.draw()}var o=this.Table.row(t);o.remove(),o.draw()},e.prototype.AgregarFilaDatatable=function(e){this.Table.row.add([e.Placa,'<a href="#" data-turbolinks="false"><i class="material-icons trailer-action trailer-delete" data-trailerid="'+e.Placa+'">delete</i></a> ']).draw(!1)},e}();t.TrailersPage=d;var u=new d;document.addEventListener("turbolinks:render",(function(e){-1!=document.URL.indexOf("/Trailers/Index")?u?u.Init():u=new d:null==u||u.Destroy()}))},"./Scripts/Shared/Components/ConfigureDataTable.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigureDataTable=void 0;var r=function(){function e(){}return e.prototype.Configure=function(e,t){var r=$(e).DataTable({columnDefs:t,responsive:!0,language:{processing:"Procesando...",lengthMenu:"Mostrar _MENU_ registros",zeroRecords:"No se encontraron resultados",emptyTable:"Ningún dato disponible en esta tabla",info:"Mostrando del _START_ al _END_ de _TOTAL_ registros",infoEmpty:"Mostrando del 0 al 0 de 0 registros",infoFiltered:"(filtrado de un total de _MAX_ registros)",search:"Buscar:",thousands:",",loadingRecords:"Cargando...",paginate:{first:"Primero",last:"Último",next:"Siguiente",previous:"Anterior"},aria:{sortAscending:": Activar para ordenar la columna de manera ascendente",sortDescending:": Activar para ordenar la columna de manera descendente"}}});return this.FilterGlobal(r),r},e.prototype.FilterGlobal=function(e){$("input#global_filter").on("keyup click",(function(){e.search($("#global_filter").val().toString(),$("#global_regex").prop("checked"),$("#global_smart").prop("checked")).draw()})),$("input.column_filter").on("keyup click",(function(){var t=$(this).parents("tr").attr("data-column");e.column(t).search($("#col"+t+"_filter").val().toString(),$("#col"+t+"_regex").prop("checked"),$("#col"+t+"_smart").prop("checked")).draw()}))},e}();t.ConfigureDataTable=r},"./Scripts/Shared/Components/ConfirmModalMessage.ts":function(e,t){var r=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(i,n){function a(e){try{l(o.next(e))}catch(e){n(e)}}function s(e){try{l(o.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,o,i,n,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,o&&(i=2&n[0]?o.return:n[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,n[1])).done)return i;switch(o=0,i&&(n=[2&n[0],i.value]),n[0]){case 0:case 1:i=n;break;case 4:return a.label++,{value:n[1],done:!1};case 5:a.label++,o=n[1],n=[0];continue;case 7:n=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==n[0]&&2!==n[0])){a=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){a.label=n[1];break}if(6===n[0]&&a.label<i[1]){a.label=i[1],i=n;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(n);break}i[2]&&a.ops.pop(),a.trys.pop();continue}n=t.call(e,a)}catch(e){n=[6,e],o=0}finally{r=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ConfirmModalMessage=void 0;var i=function(){function e(e,t,r,o){this.title=e,this.message=t,this.acceptText=r,this.dismissText=o,this.idMesssage="confirm-message",this.parent=document.body,this.CreateModal(),this.AppendModel()}return e.prototype.CreateModal=function(){this.modal=document.createElement("div"),this.modal.id=this.idMesssage,this.modal.classList.add("modal","modal-fixed-footer","modal-confirm-message-small");var e=document.createElement("div");e.classList.add("modal-content"),this.modal.appendChild(e);var t=document.createElement("h5");t.textContent=this.title,e.appendChild(t);var r=document.createElement("p");r.textContent=this.message,e.appendChild(r);var o=document.createElement("div");o.classList.add("modal-footer"),this.modal.appendChild(o),this.dismissButton=document.createElement("button"),this.dismissButton.classList.add("modal-action","waves-effect","waves-red","btn-flat","btn-orange"),this.dismissButton.type="button",this.dismissButton.textContent=this.dismissText,o.appendChild(this.dismissButton),this.acceptButton=document.createElement("button"),this.acceptButton.classList.add("modal-action","waves-effect","waves-red","btn-flat","btn-orange"),this.acceptButton.type="button",this.acceptButton.textContent=this.acceptText,o.appendChild(this.acceptButton)},e.prototype.AppendModel=function(){this.parent.appendChild(this.modal)},e.prototype.destroy=function(){this.modalInstance&&(this.modalInstance.close(),this.modalInstance.destroy());var e=document.querySelector("#"+this.idMesssage);e.parentNode.removeChild(e)},e.prototype.Confirm=function(){return r(this,void 0,void 0,(function(){var e=this;return o(this,(function(t){return[2,new Promise((function(t,r){(!e.modal||!e.acceptButton||!e.dismissButton)&&(e.destroy(),r("Fallo algo en la creación del mensaje")),M.Modal.init(e.modal,{dismissible:!1,opacity:.5,inDuration:300,outDuration:200,startingTop:"6%",endingTop:"8%"}),e.modalInstance=M.Modal.getInstance(e.modal),e.modalInstance.open(),e.acceptButton.addEventListener("click",(function(){t(!0),e.destroy()})),e.dismissButton.addEventListener("click",(function(){t(!1),e.destroy()}))}))]}))}))},e}();t.ConfirmModalMessage=i},"./Scripts/Shared/Http/HttpFetchService.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HttpFetchService=void 0;var r=function(){function e(){}return e.prototype.Post=function(e,t,r){return void 0===r&&(r=!0),new Promise((function(o,i){fetch(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){return r?e.json():e.text()})).then((function(e){o(e)})).catch((function(e){console.log(e),i(e)}))}))},e.prototype.PostForm=function(e,t,r){return new Promise((function(o,i){fetch(e,{method:"post",headers:{RequestVerificationToken:r},body:t}).then((function(e){return e.json()})).then((function(e){o(e)})).catch((function(e){console.log(e),i(e)}))}))},e.prototype.PostFormURL=function(e,t,r){return void 0===r&&(r=!0),new Promise((function(o,i){fetch(e,{method:"post",headers:{"Content-Type":"application/json"},body:t}).then((function(e){return r?e.json():e.text()})).then((function(e){o(e)})).catch((function(e){console.log(e),i(e)}))}))},e}();t.HttpFetchService=r},"./Scripts/Shared/Http/index.ts":function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.services=void 0;var n=r("./Scripts/Shared/Http/HttpFetchService.ts");t.services=[n.HttpFetchService],i(r("./Scripts/Shared/Http/HttpFetchService.ts"),t)},"./Scripts/Shared/Models/Area.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Area=void 0;t.Area=function(){}},"./Scripts/Shared/Models/Cabezote.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cabezote=void 0;t.Cabezote=function(){}},"./Scripts/Shared/Models/Conductor.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Conductor=void 0;t.Conductor=function(){}},"./Scripts/Shared/Models/Linea.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Linea=void 0;t.Linea=function(){}},"./Scripts/Shared/Models/Log.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Log=void 0;t.Log=function(){}},"./Scripts/Shared/Models/MessageResponse.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},"./Scripts/Shared/Models/Trailer.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Trailer=void 0;t.Trailer=function(){}},"./Scripts/Shared/Models/Usuario.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Usuario=void 0;t.Usuario=function(){}},"./Scripts/Shared/Models/index.ts":function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.models=void 0;var n=r("./Scripts/Shared/Models/Usuario.ts"),a=r("./Scripts/Shared/Models/Cabezote.ts"),s=r("./Scripts/Shared/Models/Trailer.ts"),l=r("./Scripts/Shared/Models/Conductor.ts"),c=r("./Scripts/Shared/Models/Area.ts"),d=r("./Scripts/Shared/Models/Log.ts"),u=r("./Scripts/Shared/Models/Linea.ts");t.models=[n.Usuario,a.Cabezote,s.Trailer,l.Conductor,c.Area,d.Log,u.Linea],i(r("./Scripts/Shared/Models/MessageResponse.ts"),t),i(r("./Scripts/Shared/Models/Usuario.ts"),t),i(r("./Scripts/Shared/Models/Cabezote.ts"),t),i(r("./Scripts/Shared/Models/Trailer.ts"),t),i(r("./Scripts/Shared/Models/Conductor.ts"),t),i(r("./Scripts/Shared/Models/Area.ts"),t),i(r("./Scripts/Shared/Models/Log.ts"),t),i(r("./Scripts/Shared/Models/Linea.ts"),t)},"./Scripts/Shared/Utils/HTMLExtensions.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),HTMLElement.prototype.on=function(e,t,r){this.addEventListener(e,(function(e){e.target.matches(t)?r(e):console.log(e.target)}))}},"./Scripts/Shared/Utils/JQValidations.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.JQValidations=void 0;var r=function(){function e(){}return e.MaxFileSizeValidation=function(){$.validator.methods.maxfilesize||($.validator.addMethod("maxfilesize",(function(e,t,r){var o=r,i=t.files[0];return!(i&&i.size/1024>o)})),$.validator.unobtrusive.adapters.add("maxfilesize",["size"],(function(e){e.rules.maxfilesize=e.params.size,e.messages.maxfilesize=e.message})))},e.AllowedExtensionsValidation=function(){$.validator.methods.allowedextensions||($.validator.addMethod("allowedextensions",(function(e,t,r){var o=r,i=t.files[0],n=o.split(",");return!i||!!new RegExp("("+n.join("|").replace(/\./g,"\\.")+")$").test(e)})),$.validator.unobtrusive.adapters.add("allowedextensions",["exts"],(function(e){e.rules.allowedextensions=e.params.exts,e.messages.allowedextensions=e.message})))},e}();t.JQValidations=r},"./Scripts/Shared/index.ts":function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r("./Scripts/Shared/Http/index.ts"),t),i(r("./Scripts/Shared/Models/index.ts"),t),i(r("./Scripts/Shared/Utils/HTMLExtensions.ts"),t)}},t={};return function r(o){if(t[o])return t[o].exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,r),i.exports}("./Scripts/Pages/Trailers/Trailers.ts")})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGUvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvUGFnZXMvVHJhaWxlcnMvR2VzdGlvblRyYWlsZXJzLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvUGFnZXMvVHJhaWxlcnMvVHJhaWxlcnMudHMiLCJ3ZWJwYWNrOi8vc2FtcGxlLy4vU2NyaXB0cy9TaGFyZWQvQ29tcG9uZW50cy9Db25maWd1cmVEYXRhVGFibGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxlLy4vU2NyaXB0cy9TaGFyZWQvQ29tcG9uZW50cy9Db25maXJtTW9kYWxNZXNzYWdlLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL0h0dHAvSHR0cEZldGNoU2VydmljZS50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9IdHRwL2luZGV4LnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9BcmVhLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9DYWJlem90ZS50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9Nb2RlbHMvQ29uZHVjdG9yLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9MaW5lYS50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9Nb2RlbHMvTG9nLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9UcmFpbGVyLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9Vc3VhcmlvLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL01vZGVscy9pbmRleC50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9VdGlscy9IVE1MRXh0ZW5zaW9ucy50cyIsIndlYnBhY2s6Ly9zYW1wbGUvLi9TY3JpcHRzL1NoYXJlZC9VdGlscy9KUVZhbGlkYXRpb25zLnRzIiwid2VicGFjazovL3NhbXBsZS8uL1NjcmlwdHMvU2hhcmVkL2luZGV4LnRzIiwid2VicGFjazovL3NhbXBsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zYW1wbGUvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJtb2RhbEJhc2UiLCJfYmFzZVVybCIsInRoaXMiLCJfaHR0cFNlcnZpY2UiLCJIdHRwRmV0Y2hTZXJ2aWNlIiwiX21vZGFsQmFzZSIsIkluaWNpYWxpemFyTW9kYWwiLCJOdWV2b1RyYWlsZXIiLCJQb3N0IiwidGhlbiIsImRhdGEiLCJpbm5lckhUTUwiLCJJbmljaWxpemFyRm9ybVRyYWlsZXIiLCJfbW9kYWxJbnN0YW5jZSIsIm9wZW4iLCJHdWFyZGFyVHJhaWxlciIsInRva2VuIiwiX2Zvcm1EYXRhIiwiZ2V0IiwidG9TdHJpbmciLCJQb3N0Rm9ybSIsIlJlc3VsdCIsIkxpbXBpYXJGb3JtdWxhcmlvIiwib25UcmFpbGVyQ3JlYWRvIiwiRXh0cmFlclRyYWlsZXIiLCJNIiwidG9hc3QiLCJodG1sIiwiTWVzc2FnZSIsImNsYXNzZXMiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJNb2RhbCIsImluaXQiLCJkaXNtaXNzaWJsZSIsIm9wYWNpdHkiLCJpbkR1cmF0aW9uIiwib3V0RHVyYXRpb24iLCJzdGFydGluZ1RvcCIsImVuZGluZ1RvcCIsInVwZGF0ZVRleHRGaWVsZHMiLCJfZm9ybVRyYWlsZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJGb3JtRGF0YSIsIiQiLCJyZW1vdmVEYXRhIiwidmFsaWRhdG9yIiwidW5vYnRydXNpdmUiLCJwYXJzZSIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwiQ2VycmFyTW9kYWwiLCJvbnN1Ym1pdCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInZhbGlkIiwiY2FiIiwiVHJhaWxlciIsIlBsYWNhIiwicmVzZXQiLCJ2YWwiLCJ0cmlnZ2VyIiwiY2xvc2UiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJUcmFpbGVyc0dlc3Rpb25QYWdlIiwiSW5pdCIsIkRlc3Ryb3kiLCJUYWJsZSIsImRlc3Ryb3kiLCJJbmljaWFsaXphckJ1dHRvbnMiLCJJbmljaWFsaXphckNvbnRyb2xzIiwiQ29uZmlndXJlRGF0YVRhYmxlIiwiQ29uZmlndXJlIiwiZ2VzdGlvblRyYWlsZXJzIiwidHJhaWxlciIsIkFncmVnYXJGaWxhRGF0YXRhYmxlIiwiSlFWYWxpZGF0aW9ucyIsIk1heEZpbGVTaXplVmFsaWRhdGlvbiIsIkFsbG93ZWRFeHRlbnNpb25zVmFsaWRhdGlvbiIsInRhYmxlIiwidHJhaWxlckFkZCIsIm9uIiwiZXZlbnQiLCJ0YXJnZXQiLCJtYXRjaGVzIiwiQm9ycmFyVHJhaWxlciIsIkNyZWFyVHJhaWxlciIsImVsZW1lbnQiLCJ0cmFpbGVySWQiLCJkYXRhc2V0IiwidHJhaWxlcmlkIiwiQ29uZmlybU1vZGFsTWVzc2FnZSIsIkNvbmZpcm0iLCJCb3JyYXJGaWxhRGF0YXRhYmxlIiwiZXJyb3IiLCIkdHIiLCJjbG9zZXN0IiwicHJldiIsImhhc0NsYXNzIiwicm93IiwicmVtb3ZlIiwiZHJhdyIsImFkZCIsIlRyYWlsZXJzUGFnZSIsInRyYWlsZXJzUGFnZSIsIlVSTCIsImluZGV4T2YiLCJpZCIsImNvbHVtbnMiLCJEYXRhVGFibGUiLCJjb2x1bW5EZWZzIiwicmVzcG9uc2l2ZSIsImxhbmd1YWdlIiwiRmlsdGVyR2xvYmFsIiwic2VhcmNoIiwicHJvcCIsImNvbHVtbiIsInBhcmVudHMiLCJhdHRyIiwidGl0bGUiLCJtZXNzYWdlIiwiYWNjZXB0VGV4dCIsImRpc21pc3NUZXh0IiwiaWRNZXNzc2FnZSIsInBhcmVudCIsImJvZHkiLCJDcmVhdGVNb2RhbCIsIkFwcGVuZE1vZGVsIiwibW9kYWwiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGVudCIsImFwcGVuZENoaWxkIiwiaGVhZGVyIiwidGV4dENvbnRlbnQiLCJidXR0b25Hcm91cCIsImRpc21pc3NCdXR0b24iLCJ0eXBlIiwiYWNjZXB0QnV0dG9uIiwibW9kYWxJbnN0YW5jZSIsImVsZW0iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImdldEluc3RhbmNlIiwidXJsIiwicGF5bG9hZCIsImpzb25SZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXNwb25zZSIsImpzb24iLCJ0ZXh0IiwiUG9zdEZvcm1VUkwiLCJzZXJ2aWNlcyIsIkFyZWEiLCJDYWJlem90ZSIsIkNvbmR1Y3RvciIsIkxpbmVhIiwiTG9nIiwiVXN1YXJpbyIsIm1vZGVscyIsIkhUTUxFbGVtZW50IiwicHJvdG90eXBlIiwiZXZlbnRUeXBlIiwiY2hpbGRTZWxlY3RvciIsImV2ZW50SGFuZGxlciIsImV2ZW50T25FbGVtZW50IiwibWV0aG9kcyIsImFkZE1ldGhvZCIsInZhbHVlIiwicGFyYW1zIiwic2l6ZSIsImZpbGUiLCJmaWxlcyIsImFkYXB0ZXJzIiwib3B0aW9ucyIsInJ1bGVzIiwibWVzc2FnZXMiLCJleHRzIiwiZXh0c0FycmF5Iiwic3BsaXQiLCJSZWdFeHAiLCJqb2luIiwicmVwbGFjZSIsInRlc3QiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCJdLCJtYXBwaW5ncyI6IjtDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBZ0IsT0FBSUQsSUFFcEJELEVBQWEsT0FBSUMsSUFSbkIsQ0FTR0ssTUFBTSxXQUNULE0sZ0tDVEEscUNBQ0EsMENBRUEsYUFlSSxXQUFZQyxHQVJKLEtBQUFDLFNBQVcsWUFTZkMsS0FBS0MsYUFBZSxJQUFJLEVBQUFDLGlCQUN4QkYsS0FBS0csV0FBYUwsRUFDbEJFLEtBQUtJLG1CQTRGYixPQXRGVyxZQUFBQyxhQUFQLHNCQUNJTCxLQUFLQyxhQUFhSyxLQUFhTixLQUFLRCxTQUFXLGdCQUFpQixNQUFNLEdBQ2pFUSxNQUFLLFNBQUNDLEdBQ0gsRUFBS0wsV0FBV00sVUFBWUQsRUFDNUIsRUFBS0UsMkJBR2JWLEtBQUtXLGVBQWVDLFFBSWhCLFlBQUFDLGVBQVIsZSxFQUFBLE9BQ1FDLEVBQXNELFFBQWpELEVBQUdkLEtBQUtlLFVBQVVDLElBQUksbUNBQTJCLGVBQUVDLFdBQzVEakIsS0FBS0MsYUFBYWlCLFNBQTJCbEIsS0FBS0QsU0FBVyxnQkFBaUJDLEtBQUtlLFVBQVdELEdBQ3pGUCxNQUFLLFNBQUNDLEdBQ0NBLEVBQUtXLFNBQ0wsRUFBS0Msb0JBQ0QsRUFBS0MsaUJBQ0wsRUFBS0EsZ0JBQWdCLEVBQUtDLG1CQUVsQ0MsRUFBRUMsTUFBTSxDQUFFQyxLQUFNakIsRUFBS2tCLFFBQVNDLFFBQVVuQixFQUFXLE9BQUksU0FBVyxhQUdyRW9CLE9BQU0sU0FBQ0MsR0FBUSxPQUFBQyxRQUFRQyxJQUFJRixPQUs1QixZQUFBekIsaUJBQVIsV0FFSUosS0FBS1csZUFBaUJZLEVBQUVTLE1BQU1DLEtBQUtqQyxLQUFLRyxXQUFZLENBQ2hEK0IsYUFBYSxFQUNiQyxRQUFTLEdBQ1RDLFdBQVksSUFDWkMsWUFBYSxJQUNiQyxZQUFhLEtBQ2JDLFVBQVcsUUFNWCxZQUFBN0Isc0JBQVIsc0JBQ0lhLEVBQUVpQixtQkFFRnhDLEtBQUt5QyxhQUFlQyxTQUFTQyxjQUFjLGlCQUMzQzNDLEtBQUtlLFVBQVksSUFBSTZCLFNBQVM1QyxLQUFLeUMsY0FDbkNJLEVBQUU3QyxLQUFLeUMsY0FBY0ssV0FBVyxhQUFhQSxXQUFXLHlCQUN4REQsRUFBRUUsVUFBVUMsWUFBWUMsTUFBTWpELEtBQUt5QyxjQUNuQ0MsU0FBU1EsZUFBZSx3QkFBd0JDLGlCQUFpQixTQUFTLFNBQUNDLEdBQU8sU0FBS0MsaUJBRXZGckQsS0FBS3lDLGFBQWFhLFNBQVcsU0FBQ0MsR0FTMUIsT0FSQUEsRUFBRUMsaUJBRUVYLEVBQUUsRUFBS0osY0FBY2dCLFVBQ3JCLEVBQUsxQyxVQUFZLElBQUk2QixTQUFTLEVBQUtILGNBRW5DLEVBQUs1QixtQkFHRixJQUtQLFlBQUFTLGVBQVIsVyxNQUNRb0MsRUFBTSxJQUFJLEVBQUFDLFFBR2QsT0FGQUQsRUFBSUUsTUFBbUMsUUFBOUIsRUFBRzVELEtBQUtlLFVBQVVDLElBQUksZ0JBQVEsZUFBRUMsV0FFbEN5QyxHQUlILFlBQUF0QyxrQkFBUixXQUNJcEIsS0FBS3lDLGFBQWFvQixRQUNsQmhCLEVBQUUsZUFBZWlCLElBQUksTUFBTUMsUUFBUSxVQUNuQ3hDLEVBQUVpQixvQkFJRSxZQUFBYSxZQUFSLFdBQ0lyRCxLQUFLVyxlQUFlcUQsUUFDcEJoRSxLQUFLeUMsYUFBYXdCLFdBQVdDLFlBQVlsRSxLQUFLeUMsZUFJdEQsRUE5R0EsR0FBYSxFQUFBMEIsdUIsNi9DQ0piLHFDQUNBLDBEQUNBLHlEQUNBLG1EQUNBLCtDQUdBLGFBUUksYUFDSW5FLEtBQUtvRSxPQStFYixPQTVFVyxZQUFBQyxRQUFQLFdBQ0lyRSxLQUFLc0UsTUFBTUMsU0FBUSxJQUloQixZQUFBSCxLQUFQLFdBQ0lwRSxLQUFLd0UscUJBQ0x4RSxLQUFLeUUsdUJBR0QsWUFBQUEsb0JBQVIsc0JBQ0l6RSxLQUFLc0UsT0FBUSxJQUFJLEVBQUFJLG9CQUFxQkMsVUFBVSxzQkFBdUIsQ0FBQyxDQUFFLE1BQVMsTUFBTyxRQUFXLEtBQ3JHM0UsS0FBSzRFLGdCQUFrQixJQUFJLEVBQUFULG9CQUFvQnpCLFNBQVNRLGVBQWUsa0JBQ3ZFbEQsS0FBSzRFLGdCQUFnQnZELGdCQUFrQixTQUFDd0QsR0FBWSxTQUFLQyxxQkFBcUJELElBQzlFLEVBQUFFLGNBQWNDLHdCQUNkLEVBQUFELGNBQWNFLCtCQUdWLFlBQUFULG1CQUFSLHNCQUNRVSxFQUFReEMsU0FBU1EsZUFBZSxzQkFDaENpQyxFQUFhekMsU0FBU1EsZUFBZSxlQUV6Q2dDLEVBQU1FLEdBQUcsUUFBUyxtQkFBbUIsU0FBQUMsR0FFN0JBLEVBQU1DLE9BQU9DLFFBQVEsb0JBQ3JCLEVBQUtDLGNBQWNILEVBQU1DLFdBRWpDSCxFQUFXaEMsaUJBQWlCLFNBQVMsU0FBQWtDLEdBQVMsU0FBS0ksbUJBR3pDLFlBQUFELGNBQWQsU0FBNEJFLEcsdUdBR0gsT0FGakJDLEVBQVlELEVBQVFFLFFBQVFDLFVBRVgsR0FETCxJQUFJLEVBQUFDLG9CQUFvQixtQkFBb0IsOEJBQWdDSCxFQUFZLElBQUssVUFBVyxZQUNyRkksVyxjQUFkLFdBRUcsSUFBSSxFQUFBN0Ysa0JBQ1pJLEtBQXVCLDBCQUEyQnFGLEdBQ3pEcEYsTUFBSyxTQUFDQyxHQUNDQSxFQUFLVyxRQUNMLEVBQUs2RSxvQkFBb0JOLEdBQzdCbkUsRUFBRUMsTUFBTSxDQUFFQyxLQUFNakIsRUFBS2tCLFFBQVNDLFFBQVVuQixFQUFXLE9BQUksU0FBVyxhQUVuRW9CLE9BQU0sU0FBQ3FFLEdBQ04xRSxFQUFFQyxNQUFNLENBQUVDLEtBQU13RSxFQUFPdEUsUUFBUyxhLFlBS3hDLFlBQUE4RCxhQUFSLFdBQ0l6RixLQUFLNEUsZ0JBQWdCdkUsZ0JBS2pCLFlBQUEyRixvQkFBUixTQUE0Qk4sR0FDeEIsSUFBSVEsRUFBTXJELEVBQUU2QyxHQUFTUyxRQUFRLE1BQzdCLEdBQUlELEVBQUlFLE9BQU9DLFNBQVMsVUFBVyxDQUMvQixJQUFJLEVBQU1yRyxLQUFLc0UsTUFBTWdDLElBQUlKLEVBQUlFLFFBQzdCLEVBQUlHLFNBQ0osRUFBSUMsT0FFUixJQUFJRixFQUFNdEcsS0FBS3NFLE1BQU1nQyxJQUFJSixHQUN6QkksRUFBSUMsU0FDSkQsRUFBSUUsUUFJQSxZQUFBMUIscUJBQVIsU0FBNkJELEdBQ3pCN0UsS0FBS3NFLE1BQU1nQyxJQUFJRyxJQUFJLENBQ2Y1QixFQUFRakIsTUFDUiwrR0FBaUhpQixFQUFRakIsTUFBUSxzQkFDbEk0QyxNQUFLLElBS2hCLEVBeEZBLEdBQWEsRUFBQUUsZUEwRmIsSUFBSUMsRUFBZSxJQUFJRCxFQUt2QmhFLFNBQVNTLGlCQUFpQixxQkFBcUIsU0FBQ0ksSUFDSSxHQUE1Q2IsU0FBU2tFLElBQUlDLFFBQVEsbUJBQ2pCRixFQUNBQSxFQUFhdkMsT0FHYnVDLEVBQWUsSUFBSUQsRUFLdkJDLFdBQWN0QyxjLHlJQ2pIdEIsK0JBdURBLE9BckRXLFlBQUFNLFVBQVAsU0FBaUJtQyxFQUFZQyxHQUV6QixJQUFJN0IsRUFBUXJDLEVBQUVpRSxHQUFJRSxVQUFVLENBQ3hCQyxXQUFZRixFQUNaRyxZQUFZLEVBQ1pDLFNBQVUsQ0FDTixXQUFjLGdCQUNkLFdBQWMsMkJBQ2QsWUFBZSwrQkFDZixXQUFjLHVDQUNkLEtBQVEsc0RBQ1IsVUFBYSxzQ0FDYixhQUFnQiw0Q0FDaEIsT0FBVSxVQUNWLFVBQWEsSUFDYixlQUFrQixjQUNsQixTQUFZLENBQ1IsTUFBUyxVQUNULEtBQVEsU0FDUixLQUFRLFlBQ1IsU0FBWSxZQUVoQixLQUFRLENBQ0osY0FBaUIseURBQ2pCLGVBQWtCLDhEQU85QixPQUZBbkgsS0FBS29ILGFBQWFsQyxHQUVYQSxHQUdILFlBQUFrQyxhQUFSLFNBQXFCbEMsR0FFakJyQyxFQUFFLHVCQUF1QnVDLEdBQUcsZUFBZSxXQUN2Q0YsRUFBTW1DLE9BQU94RSxFQUFFLGtCQUFrQmlCLE1BQU03QyxXQUFZNEIsRUFBRSxpQkFBaUJ5RSxLQUFLLFdBQVl6RSxFQUFFLGlCQUFpQnlFLEtBQUssWUFBWWQsVUFHL0gzRCxFQUFFLHVCQUF1QnVDLEdBQUcsZUFBZSxXQUN2QyxJQUFJbUMsRUFBUzFFLEVBQUU3QyxNQUFNd0gsUUFBUSxNQUFNQyxLQUFLLGVBRXhDdkMsRUFBTXFDLE9BQU9BLEdBQ1JGLE9BQ0d4RSxFQUFFLE9BQVMwRSxFQUFTLFdBQVd6RCxNQUFNN0MsV0FDckM0QixFQUFFLE9BQVMwRSxFQUFTLFVBQVVELEtBQUssV0FDbkN6RSxFQUFFLE9BQVMwRSxFQUFTLFVBQVVELEtBQUssWUFFdENkLFdBSWpCLEVBdkRBLEdBQWEsRUFBQTlCLHNCLGdoRENBYixpQkFTSSxXQUFtQmdELEVBQ1JDLEVBQ0FDLEVBQ0FDLEdBSFEsS0FBQUgsUUFDUixLQUFBQyxVQUNBLEtBQUFDLGFBQ0EsS0FBQUMsY0FFUDdILEtBQUs4SCxXQUFhLGtCQUNsQjlILEtBQUsrSCxPQUFTckYsU0FBU3NGLEtBQ3ZCaEksS0FBS2lJLGNBQ0xqSSxLQUFLa0ksY0ErRmIsT0E1RlksWUFBQUQsWUFBUixXQUNJakksS0FBS21JLE1BQVF6RixTQUFTMEYsY0FBYyxPQUNwQ3BJLEtBQUttSSxNQUFNckIsR0FBSzlHLEtBQUs4SCxXQUNyQjlILEtBQUttSSxNQUFNRSxVQUFVNUIsSUFBSSxRQUFTLHFCQUFzQiwrQkFFeEQsSUFBTTZCLEVBQVU1RixTQUFTMEYsY0FBYyxPQUN2Q0UsRUFBUUQsVUFBVTVCLElBQUksaUJBQ3RCekcsS0FBS21JLE1BQU1JLFlBQVlELEdBRXZCLElBQU1FLEVBQVM5RixTQUFTMEYsY0FBYyxNQUN0Q0ksRUFBT0MsWUFBY3pJLEtBQUswSCxNQUMxQlksRUFBUUMsWUFBWUMsR0FFcEIsSUFBTWIsRUFBVWpGLFNBQVMwRixjQUFjLEtBQ3ZDVCxFQUFRYyxZQUFjekksS0FBSzJILFFBQzNCVyxFQUFRQyxZQUFZWixHQUVwQixJQUFNZSxFQUFjaEcsU0FBUzBGLGNBQWMsT0FDM0NNLEVBQVlMLFVBQVU1QixJQUFJLGdCQUMxQnpHLEtBQUttSSxNQUFNSSxZQUFZRyxHQUV2QjFJLEtBQUsySSxjQUFnQmpHLFNBQVMwRixjQUFjLFVBQzVDcEksS0FBSzJJLGNBQWNOLFVBQVU1QixJQUN6QixlQUNBLGVBQ0EsWUFDQSxXQUNBLGNBRUp6RyxLQUFLMkksY0FBY0MsS0FBTyxTQUMxQjVJLEtBQUsySSxjQUFjRixZQUFjekksS0FBSzZILFlBQ3RDYSxFQUFZSCxZQUFZdkksS0FBSzJJLGVBRTdCM0ksS0FBSzZJLGFBQWVuRyxTQUFTMEYsY0FBYyxVQUMzQ3BJLEtBQUs2SSxhQUFhUixVQUFVNUIsSUFDeEIsZUFDQSxlQUNBLFlBQ0EsV0FDQSxjQUVKekcsS0FBSzZJLGFBQWFELEtBQU8sU0FDekI1SSxLQUFLNkksYUFBYUosWUFBY3pJLEtBQUs0SCxXQUNyQ2MsRUFBWUgsWUFBWXZJLEtBQUs2SSxlQUd6QixZQUFBWCxZQUFSLFdBQ0lsSSxLQUFLK0gsT0FBT1EsWUFBWXZJLEtBQUttSSxRQUd6QixZQUFBNUQsUUFBUixXQUNRdkUsS0FBSzhJLGdCQUNMOUksS0FBSzhJLGNBQWM5RSxRQUNuQmhFLEtBQUs4SSxjQUFjdkUsV0FHdkIsSUFBSXdFLEVBQU9yRyxTQUFTQyxjQUFjLElBQU0zQyxLQUFLOEgsWUFDN0NpQixFQUFLOUUsV0FBV0MsWUFBWTZFLElBR25CLFlBQUFoRCxRQUFiLFcsOEVBQ0ksTUFBTyxDQUFQLEVBQU8sSUFBSWlELFNBQWlCLFNBQUNDLEVBQVNDLEtBRzdCLEVBQUtmLFFBQVUsRUFBS1UsZUFBaUIsRUFBS0YsaUJBRTNDLEVBQUtwRSxVQUNMMkUsRUFBTywwQ0FHWDNILEVBQUVTLE1BQU1DLEtBQUssRUFBS2tHLE1BQU8sQ0FDckJqRyxhQUFhLEVBQ2JDLFFBQVMsR0FDVEMsV0FBWSxJQUNaQyxZQUFhLElBQ2JDLFlBQWEsS0FDYkMsVUFBVyxPQUVmLEVBQUt1RyxjQUFnQnZILEVBQUVTLE1BQU1tSCxZQUFZLEVBQUtoQixPQUM5QyxFQUFLVyxjQUFjbEksT0FFbkIsRUFBS2lJLGFBQWExRixpQkFBaUIsU0FBUyxXQUN4QzhGLEdBQVEsR0FDUixFQUFLMUUsYUFHVCxFQUFLb0UsY0FBY3hGLGlCQUFpQixTQUFTLFdBQ3pDOEYsR0FBUSxHQUNSLEVBQUsxRSx3QkFJckIsRUFoSEEsR0FBYSxFQUFBdUIsdUIsK0hDQ2IsK0JBNkRBLE9BM0RXLFlBQUF4RixLQUFQLFNBQWU4SSxFQUFhQyxFQUFjQyxHQWlCdEMsWUFqQnNDLElBQUFBLE9BQUEsR0FDdEIsSUFBSU4sU0FBVyxTQUFDQyxFQUFTQyxHQUNyQ0ssTUFBTUgsRUFBSyxDQUNQSSxPQUFRLE9BQ1JDLFFBQVMsQ0FBRSxlQUFnQixvQkFDM0J6QixLQUFNMEIsS0FBS0MsVUFBVU4sS0FFcEI5SSxNQUFLLFNBQUFxSixHQUFZLFNBQWlCQSxFQUFTQyxPQUFTRCxFQUFTRSxVQUM3RHZKLE1BQUssU0FBQUMsR0FDRnlJLEVBQVF6SSxNQUVYb0IsT0FBTSxTQUFDcUUsR0FDSm5FLFFBQVFDLElBQUlrRSxHQUNaaUQsRUFBT2pELFVBT2hCLFlBQUEvRSxTQUFQLFNBQW1Ca0ksRUFBYUMsRUFBY3ZJLEdBaUIxQyxPQWhCZ0IsSUFBSWtJLFNBQVcsU0FBQ0MsRUFBU0MsR0FDckNLLE1BQU1ILEVBQUssQ0FDUEksT0FBUSxPQUNSQyxRQUFTLENBQUUseUJBQTRCM0ksR0FDdkNrSCxLQUFNcUIsSUFFTDlJLE1BQUssU0FBQXFKLEdBQVksT0FBQUEsRUFBU0MsVUFDMUJ0SixNQUFLLFNBQUFDLEdBQ0Z5SSxFQUFRekksTUFFWG9CLE9BQU0sU0FBQ3FFLEdBQ0puRSxRQUFRQyxJQUFJa0UsR0FDWmlELEVBQU9qRCxVQU9oQixZQUFBOEQsWUFBUCxTQUFzQlgsRUFBYUMsRUFBY0MsR0FpQjdDLFlBakI2QyxJQUFBQSxPQUFBLEdBQzdCLElBQUlOLFNBQVcsU0FBQ0MsRUFBU0MsR0FDckNLLE1BQU1ILEVBQUssQ0FDUEksT0FBUSxPQUNSQyxRQUFTLENBQUUsZUFBZ0Isb0JBQzNCekIsS0FBTXFCLElBRUw5SSxNQUFLLFNBQUFxSixHQUFZLFNBQWlCQSxFQUFTQyxPQUFTRCxFQUFTRSxVQUM3RHZKLE1BQUssU0FBQUMsR0FDRnlJLEVBQVF6SSxNQUVYb0IsT0FBTSxTQUFDcUUsR0FDSm5FLFFBQVFDLElBQUlrRSxHQUNaaUQsRUFBT2pELFVBTTNCLEVBN0RBLEdBQWEsRUFBQS9GLG9CLDZiQ0RiLHFEQUVhLEVBQUE4SixTQUFXLENBQUMsRUFBQTlKLGtCQUV6QixxRCx5R0NKYSxFQUFBK0osS0FBYixjLGlIQ0FhLEVBQUFDLFNBQWIsYyxtSENBYSxFQUFBQyxVQUFiLGMsMkdDQWEsRUFBQUMsTUFBYixjLHVHQ0FhLEVBQUFDLElBQWIsYyxzTkNBYSxFQUFBMUcsUUFBYixjLCtHQ0FhLEVBQUEyRyxRQUFiLGMsNmJDQ0EsOENBQ0EsMkNBQ0EsMENBQ0EsNENBQ0EsdUNBQ0Esc0NBQ0Esd0NBRWEsRUFBQUMsT0FBUyxDQUFDLEVBQUFELFFBQVMsRUFBQUosU0FBVSxFQUFBdkcsUUFBUyxFQUFBd0csVUFBVyxFQUFBRixLQUFNLEVBQUFJLElBQUssRUFBQUQsT0FFekUscURBQ0EsNkNBQ0EsOENBQ0EsNkNBQ0EsK0NBQ0EsMENBQ0EseUNBQ0EsNEMsb0dDWkFJLFlBQVlDLFVBQVVyRixHQUFLLFNBQVVzRixFQUFtQkMsRUFBdUJDLEdBQzNFNUssS0FBS21ELGlCQUFpQnVILEdBQVcsU0FBQUcsR0FDekJBLEVBQWV2RixPQUFPQyxRQUFRb0YsR0FDOUJDLEVBQWFDLEdBRWIvSSxRQUFRQyxJQUFJOEksRUFBZXZGLGEsMEhDWHZDLCtCQWdEQSxPQTlDa0IsRUFBQU4sc0JBQWQsV0FDUW5DLEVBQUVFLFVBQVUrSCxRQUFxQixjQUdyQ2pJLEVBQUVFLFVBQVVnSSxVQUFVLGVBQWUsU0FBVUMsRUFBT3RGLEVBQVN1RixHQUMzRCxJQUNJQyxFQUFPRCxFQUFRRSxFQUROekYsRUFDb0IwRixNQUFNLEdBRXZDLFFBQUlELEdBQ0tBLEVBQUtELEtBQU8sS0FBUUEsTUFPakNySSxFQUFFRSxVQUFVQyxZQUFZcUksU0FBUzVFLElBQUksY0FBZSxDQUFDLFNBQVMsU0FBVTZFLEdBRXBFQSxFQUFRQyxNQUFtQixZQUFJRCxFQUFRTCxPQUFhLEtBQ3BESyxFQUFRRSxTQUFzQixZQUFJRixFQUFRM0QsYUFJcEMsRUFBQTFDLDRCQUFkLFdBQ1FwQyxFQUFFRSxVQUFVK0gsUUFBMkIsb0JBRzNDakksRUFBRUUsVUFBVWdJLFVBQVUscUJBQXFCLFNBQVVDLEVBQU90RixFQUFTdUYsR0FDakUsSUFDSVEsRUFBT1IsRUFBUUUsRUFETnpGLEVBQ29CMEYsTUFBTSxHQUNuQ00sRUFBWUQsRUFBS0UsTUFBTSxLQUUzQixPQUFJUixLQUNJLElBQUtTLE9BQU8sSUFBTUYsRUFBVUcsS0FBSyxLQUFLQyxRQUFRLE1BQU8sT0FBUyxNQUFPQyxLQUFLZixNQVF0Rm5JLEVBQUVFLFVBQVVDLFlBQVlxSSxTQUFTNUUsSUFBSSxvQkFBcUIsQ0FBQyxTQUFTLFNBQVU2RSxHQUMxRUEsRUFBUUMsTUFBeUIsa0JBQUlELEVBQVFMLE9BQWEsS0FDMURLLEVBQVFFLFNBQTRCLGtCQUFJRixFQUFRM0QsYUFHNUQsRUFoREEsR0FBYSxFQUFBNUMsaUIsc2FDQWIseUNBQ0EsMkNBQ0EscURDRElpSCxFQUEyQixHQ0UvQixPRENBLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVV6TSxRQUczQyxJQUFJQyxFQUFTc00sRUFBeUJFLEdBQVksQ0FHakR6TSxRQUFTLElBT1YsT0FIQTBNLEVBQW9CRCxHQUFVRSxLQUFLMU0sRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU3dNLEdBR3BFdk0sRUFBT0QsUUNqQlJ3TSxDQUFvQix5QyIsImZpbGUiOiJ0cmFpbGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInNhbXBsZVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJzYW1wbGVcIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCJcclxuaW1wb3J0IHsgSHR0cEZldGNoU2VydmljZSwgSU1lc3NhZ2VSZXNwb25zZSB9IGZyb20gJy4uLy4uL1NoYXJlZCc7XHJcbmltcG9ydCB7IFRyYWlsZXIgfSBmcm9tICcuLi8uLi9TaGFyZWQvTW9kZWxzL1RyYWlsZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRyYWlsZXJzR2VzdGlvblBhZ2Uge1xyXG5cclxuICAgIC8vUFJPUElFREFERVNcclxuICAgIHB1YmxpYyBvblRyYWlsZXJDcmVhZG8/OiAodHJhaWxlcjogVHJhaWxlcikgPT4gdm9pZDtcclxuICAgIHB1YmxpYyBvblRyYWlsZXJBY3R1YWxpemFkbz86ICh0cmFpbGVyOiBUcmFpbGVyKSA9PiB2b2lkO1xyXG5cclxuICAgIC8vQ0FNUE9TXHJcbiAgICBwcml2YXRlIF9iYXNlVXJsID0gXCIvVHJhaWxlcnNcIjtcclxuICAgIHByaXZhdGUgX2h0dHBTZXJ2aWNlOiBIdHRwRmV0Y2hTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfbW9kYWxJbnN0YW5jZTogTS5Nb2RhbDtcclxuICAgIHByaXZhdGUgX21vZGFsQmFzZTogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIF9mb3JtVHJhaWxlcjogSFRNTEZvcm1FbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBfZm9ybURhdGE6IEZvcm1EYXRhO1xyXG5cclxuICAgIC8vQ09OU1RSVUNUT1JcclxuICAgIGNvbnN0cnVjdG9yKG1vZGFsQmFzZTogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9odHRwU2VydmljZSA9IG5ldyBIdHRwRmV0Y2hTZXJ2aWNlKCk7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxCYXNlID0gbW9kYWxCYXNlO1xyXG4gICAgICAgIHRoaXMuSW5pY2lhbGl6YXJNb2RhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vTUVUT0RPU1xyXG5cclxuICAgIC8vQ3JlYWNpb24gZGUgbnVldm8gVHJhaWxlclxyXG4gICAgcHVibGljIE51ZXZvVHJhaWxlcigpIHtcclxuICAgICAgICB0aGlzLl9odHRwU2VydmljZS5Qb3N0PHN0cmluZz4odGhpcy5fYmFzZVVybCArIFwiL051ZXZvVHJhaWxlclwiLCBudWxsLCBmYWxzZSlcclxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGFsQmFzZS5pbm5lckhUTUwgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5JbmljaWxpemFyRm9ybVRyYWlsZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX21vZGFsSW5zdGFuY2Uub3BlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vR3VhcmRhciBUcmFpbGVyXHJcbiAgICBwcml2YXRlIEd1YXJkYXJUcmFpbGVyKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCB0b2tlbiA9IHRoaXMuX2Zvcm1EYXRhLmdldChcIlJlcXVlc3RWZXJpZmljYXRpb25Ub2tlblwiKT8udG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLl9odHRwU2VydmljZS5Qb3N0Rm9ybTxJTWVzc2FnZVJlc3BvbnNlPih0aGlzLl9iYXNlVXJsICsgXCIvQ3JlYXJUcmFpbGVyXCIsIHRoaXMuX2Zvcm1EYXRhLCB0b2tlbilcclxuICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLlJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuTGltcGlhckZvcm11bGFyaW8oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblRyYWlsZXJDcmVhZG8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25UcmFpbGVyQ3JlYWRvKHRoaXMuRXh0cmFlclRyYWlsZXIoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBNLnRvYXN0KHsgaHRtbDogZGF0YS5NZXNzYWdlLCBjbGFzc2VzOiAoZGF0YS5SZXN1bHQpID8gXCJzdWNjZXNcIiA6IFwiZXJyb3JcIiB9KTtcclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy9JbmljaWFsaXphciBjb250cm9sIG1vZGFsXHJcbiAgICBwcml2YXRlIEluaWNpYWxpemFyTW9kYWwoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX21vZGFsSW5zdGFuY2UgPSBNLk1vZGFsLmluaXQodGhpcy5fbW9kYWxCYXNlLCB7XHJcbiAgICAgICAgICAgIGRpc21pc3NpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgb3BhY2l0eTogLjUsXHJcbiAgICAgICAgICAgIGluRHVyYXRpb246IDMwMCxcclxuICAgICAgICAgICAgb3V0RHVyYXRpb246IDIwMCxcclxuICAgICAgICAgICAgc3RhcnRpbmdUb3A6ICc2JScsXHJcbiAgICAgICAgICAgIGVuZGluZ1RvcDogJzglJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvL0luaWNpYWxpemFyIGNvbnRyb2xlcyBkZSBmb3JtdWxhcmlvXHJcbiAgICBwcml2YXRlIEluaWNpbGl6YXJGb3JtVHJhaWxlcigpOiB2b2lkIHtcclxuICAgICAgICBNLnVwZGF0ZVRleHRGaWVsZHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZm9ybVRyYWlsZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RyYWlsZXItZm9ybVwiKTtcclxuICAgICAgICB0aGlzLl9mb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLl9mb3JtVHJhaWxlcik7XHJcbiAgICAgICAgJCh0aGlzLl9mb3JtVHJhaWxlcikucmVtb3ZlRGF0YShcInZhbGlkYXRvclwiKS5yZW1vdmVEYXRhKFwidW5vYnRydXNpdmVWYWxpZGF0aW9uXCIpO1xyXG4gICAgICAgICQudmFsaWRhdG9yLnVub2J0cnVzaXZlLnBhcnNlKHRoaXMuX2Zvcm1UcmFpbGVyKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRyYWlsZXItbW9kYWwtY2FuY2VsXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB0aGlzLkNlcnJhck1vZGFsKCkpO1xyXG5cclxuICAgICAgICB0aGlzLl9mb3JtVHJhaWxlci5vbnN1Ym1pdCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkKHRoaXMuX2Zvcm1UcmFpbGVyKS52YWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLl9mb3JtVHJhaWxlcik7XHJcbiAgICAgICAgICAgICAgICAvL2Zvcm1EYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHsgY29uc29sZS5sb2coa2V5ICsgXCI6IFwiICsgdmFsdWUpIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5HdWFyZGFyVHJhaWxlcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHByZXZlbnQgcmVsb2FkXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvL0V4dHJhZXIgVHJhaWxlciBkZSBmb3JtdWxhcmlvXHJcbiAgICBwcml2YXRlIEV4dHJhZXJUcmFpbGVyKCk6IFRyYWlsZXIge1xyXG4gICAgICAgIGxldCBjYWIgPSBuZXcgVHJhaWxlcigpO1xyXG4gICAgICAgIGNhYi5QbGFjYSA9IHRoaXMuX2Zvcm1EYXRhLmdldChcIlBsYWNhXCIpPy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2FiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vUmVzZXQgZGUgZm9ybXVsYXJpb1xyXG4gICAgcHJpdmF0ZSBMaW1waWFyRm9ybXVsYXJpbygpIHtcclxuICAgICAgICB0aGlzLl9mb3JtVHJhaWxlci5yZXNldCgpO1xyXG4gICAgICAgICQoJyN0cmFpbGVyLWlkJykudmFsKG51bGwpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgIE0udXBkYXRlVGV4dEZpZWxkcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQ2VycmFyIGNvbnRyb2wgbW9kYWxcclxuICAgIHByaXZhdGUgQ2VycmFyTW9kYWwoKSB7XHJcbiAgICAgICAgdGhpcy5fbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1UcmFpbGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fZm9ybVRyYWlsZXIpO1xyXG4gICAgfVxyXG5cclxuXHJcbn0iLCJpbXBvcnQgeyBIdHRwRmV0Y2hTZXJ2aWNlLCBJTWVzc2FnZVJlc3BvbnNlLCBUcmFpbGVyIH0gZnJvbSAnLi4vLi4vU2hhcmVkJztcclxuaW1wb3J0IHsgQ29uZmlybU1vZGFsTWVzc2FnZSB9IGZyb20gJy4uLy4uL1NoYXJlZC9Db21wb25lbnRzL0NvbmZpcm1Nb2RhbE1lc3NhZ2UnO1xyXG5pbXBvcnQgeyBDb25maWd1cmVEYXRhVGFibGUgfSBmcm9tICcuLi8uLi9TaGFyZWQvQ29tcG9uZW50cy9Db25maWd1cmVEYXRhVGFibGUnO1xyXG5pbXBvcnQgeyBUcmFpbGVyc0dlc3Rpb25QYWdlIH0gZnJvbSAnLi9HZXN0aW9uVHJhaWxlcnMnO1xyXG5pbXBvcnQgeyBKUVZhbGlkYXRpb25zIH0gZnJvbSAnLi4vLi4vU2hhcmVkL1V0aWxzL0pRVmFsaWRhdGlvbnMnO1xyXG5pbXBvcnQgeyBJUGFnZSB9IGZyb20gJy4uLy4uL1NoYXJlZC9Db21wb25lbnRzL0lQYWdlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFpbGVyc1BhZ2UgaW1wbGVtZW50cyBJUGFnZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBUYWJsZTogRGF0YVRhYmxlcy5BcGk7XHJcbiAgICBwcml2YXRlIG1vZGFsSW5zdGFuY2U6IE0uTW9kYWw7XHJcbiAgICBwcml2YXRlIGdlc3Rpb25UcmFpbGVyczogVHJhaWxlcnNHZXN0aW9uUGFnZTtcclxuXHJcbiAgICBCYXNlVVJMOiBcIi9UcmFpbGVycy9JbmRleFwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuSW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuVGFibGUuZGVzdHJveShmYWxzZSk7XHJcbiAgICAgICAgLy90aGlzLlRhYmxlLnJvd3MoKS5pbnZhbGlkYXRlKCkuZHJhdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBJbml0KCkge1xyXG4gICAgICAgIHRoaXMuSW5pY2lhbGl6YXJCdXR0b25zKCk7XHJcbiAgICAgICAgdGhpcy5JbmljaWFsaXphckNvbnRyb2xzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBJbmljaWFsaXphckNvbnRyb2xzKCkge1xyXG4gICAgICAgIHRoaXMuVGFibGUgPSBuZXcgQ29uZmlndXJlRGF0YVRhYmxlKCkuQ29uZmlndXJlKFwiI2RhdGEtdGFibGUtdHJhaWxlclwiLCBbeyBcIndpZHRoXCI6IFwiNTAlXCIsIFwidGFyZ2V0c1wiOiAwIH1dKTtcclxuICAgICAgICB0aGlzLmdlc3Rpb25UcmFpbGVycyA9IG5ldyBUcmFpbGVyc0dlc3Rpb25QYWdlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJhaWxlci1tb2RhbFwiKSk7XHJcbiAgICAgICAgdGhpcy5nZXN0aW9uVHJhaWxlcnMub25UcmFpbGVyQ3JlYWRvID0gKHRyYWlsZXIpID0+IHRoaXMuQWdyZWdhckZpbGFEYXRhdGFibGUodHJhaWxlcik7XHJcbiAgICAgICAgSlFWYWxpZGF0aW9ucy5NYXhGaWxlU2l6ZVZhbGlkYXRpb24oKTtcclxuICAgICAgICBKUVZhbGlkYXRpb25zLkFsbG93ZWRFeHRlbnNpb25zVmFsaWRhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgSW5pY2lhbGl6YXJCdXR0b25zKCkge1xyXG4gICAgICAgIHZhciB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF0YS10YWJsZS10cmFpbGVyXCIpO1xyXG4gICAgICAgIHZhciB0cmFpbGVyQWRkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0cmFpbGVyLWFkZFwiKTtcclxuXHJcbiAgICAgICAgdGFibGUub24oJ2NsaWNrJywgJy50cmFpbGVyLWFjdGlvbicsIGV2ZW50ID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQubWF0Y2hlcyhcIi50cmFpbGVyLWRlbGV0ZVwiKSlcclxuICAgICAgICAgICAgICAgIHRoaXMuQm9ycmFyVHJhaWxlcihldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRyYWlsZXJBZGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB0aGlzLkNyZWFyVHJhaWxlcigpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIEJvcnJhclRyYWlsZXIoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgdHJhaWxlcklkID0gZWxlbWVudC5kYXRhc2V0LnRyYWlsZXJpZDtcclxuICAgICAgICBjb25zdCBjb25maXJtID0gbmV3IENvbmZpcm1Nb2RhbE1lc3NhZ2UoXCJFbGltaW5hciBUcmFpbGVyXCIsIFwiwr9EZXNlYSBlbGltaW5hciBlbCBUcmFpbGVyIFwiICsgdHJhaWxlcklkICsgXCI/XCIsIFwiQWNlcHRhclwiLCBcIkNhbmNlbGFyXCIpO1xyXG4gICAgICAgIGNvbnN0IHNob3VsZERlbGV0ZSA9IGF3YWl0IGNvbmZpcm0uQ29uZmlybSgpO1xyXG4gICAgICAgIGlmIChzaG91bGREZWxldGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaHR0cFNlcnZpY2UgPSBuZXcgSHR0cEZldGNoU2VydmljZSgpO1xyXG4gICAgICAgICAgICBodHRwU2VydmljZS5Qb3N0PElNZXNzYWdlUmVzcG9uc2U+KCcvVHJhaWxlcnMvQm9ycmFyVHJhaWxlcicsIHRyYWlsZXJJZClcclxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuUmVzdWx0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkJvcnJhckZpbGFEYXRhdGFibGUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgTS50b2FzdCh7IGh0bWw6IGRhdGEuTWVzc2FnZSwgY2xhc3NlczogKGRhdGEuUmVzdWx0KSA/IFwic3VjY2VzXCIgOiBcImVycm9yXCIgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgTS50b2FzdCh7IGh0bWw6IGVycm9yLCBjbGFzc2VzOiBcImVycm9yXCIgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBDcmVhclRyYWlsZXIoKSB7XHJcbiAgICAgICAgdGhpcy5nZXN0aW9uVHJhaWxlcnMuTnVldm9UcmFpbGVyKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vRnVuY2lvbiBwYXJhIGJvcnJhciBUcmFpbGVyIGRlbCBkYXRhdGFibGVcclxuICAgIHByaXZhdGUgQm9ycmFyRmlsYURhdGF0YWJsZShlbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHZhciAkdHIgPSAkKGVsZW1lbnQpLmNsb3Nlc3QoXCJ0clwiKTtcclxuICAgICAgICBpZiAoJHRyLnByZXYoKS5oYXNDbGFzcyhcInBhcmVudFwiKSkge1xyXG4gICAgICAgICAgICBsZXQgcm93ID0gdGhpcy5UYWJsZS5yb3coJHRyLnByZXYoKSk7XHJcbiAgICAgICAgICAgIHJvdy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgcm93LmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJvdyA9IHRoaXMuVGFibGUucm93KCR0cik7XHJcbiAgICAgICAgcm93LnJlbW92ZSgpO1xyXG4gICAgICAgIHJvdy5kcmF3KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYWdyZWdhciB1biBudWV2byBUcmFpbGVyXHJcbiAgICBwcml2YXRlIEFncmVnYXJGaWxhRGF0YXRhYmxlKHRyYWlsZXI6IFRyYWlsZXIpIHtcclxuICAgICAgICB0aGlzLlRhYmxlLnJvdy5hZGQoW1xyXG4gICAgICAgICAgICB0cmFpbGVyLlBsYWNhLFxyXG4gICAgICAgICAgICAnPGEgaHJlZj1cIiNcIiBkYXRhLXR1cmJvbGlua3M9XCJmYWxzZVwiPjxpIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMgdHJhaWxlci1hY3Rpb24gdHJhaWxlci1kZWxldGVcIiBkYXRhLXRyYWlsZXJpZD1cIicgKyB0cmFpbGVyLlBsYWNhICsgJ1wiPmRlbGV0ZTwvaT48L2E+ICdcclxuICAgICAgICBdKS5kcmF3KGZhbHNlKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxudmFyIHRyYWlsZXJzUGFnZSA9IG5ldyBUcmFpbGVyc1BhZ2UoKTtcclxuXHJcblxyXG5cclxuLy8gQ2FsbGVkIGFmdGVyIGV2ZXJ5IG5vbi1pbml0aWFsIHBhZ2UgbG9hZFxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0dXJib2xpbmtzOnJlbmRlcicsIChlOiBhbnkpID0+IHtcclxuICAgIGlmIChkb2N1bWVudC5VUkwuaW5kZXhPZignL1RyYWlsZXJzL0luZGV4JykgIT0gLTEpIHtcclxuICAgICAgICBpZiAodHJhaWxlcnNQYWdlKSB7XHJcbiAgICAgICAgICAgIHRyYWlsZXJzUGFnZS5Jbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0cmFpbGVyc1BhZ2UgPSBuZXcgVHJhaWxlcnNQYWdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY29uc29sZS5sb2coZS5kYXRhLnVybCk7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgdHJhaWxlcnNQYWdlPy5EZXN0cm95KCk7XHJcbn0pOyIsImV4cG9ydCBjbGFzcyBDb25maWd1cmVEYXRhVGFibGUge1xyXG5cclxuICAgIHB1YmxpYyBDb25maWd1cmUoaWQ6IHN0cmluZywgY29sdW1ucz86IERhdGFUYWJsZXMuQ29sdW1uRGVmc1NldHRpbmdzW10pOiBEYXRhVGFibGVzLkFwaSB7XHJcblxyXG4gICAgICAgIGxldCB0YWJsZSA9ICQoaWQpLkRhdGFUYWJsZSh7XHJcbiAgICAgICAgICAgIGNvbHVtbkRlZnM6IGNvbHVtbnMsXHJcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIGxhbmd1YWdlOiB7XHJcbiAgICAgICAgICAgICAgICBcInByb2Nlc3NpbmdcIjogXCJQcm9jZXNhbmRvLi4uXCIsXHJcbiAgICAgICAgICAgICAgICBcImxlbmd0aE1lbnVcIjogXCJNb3N0cmFyIF9NRU5VXyByZWdpc3Ryb3NcIixcclxuICAgICAgICAgICAgICAgIFwiemVyb1JlY29yZHNcIjogXCJObyBzZSBlbmNvbnRyYXJvbiByZXN1bHRhZG9zXCIsXHJcbiAgICAgICAgICAgICAgICBcImVtcHR5VGFibGVcIjogXCJOaW5nw7puIGRhdG8gZGlzcG9uaWJsZSBlbiBlc3RhIHRhYmxhXCIsXHJcbiAgICAgICAgICAgICAgICBcImluZm9cIjogXCJNb3N0cmFuZG8gZGVsIF9TVEFSVF8gYWwgX0VORF8gZGUgX1RPVEFMXyByZWdpc3Ryb3NcIixcclxuICAgICAgICAgICAgICAgIFwiaW5mb0VtcHR5XCI6IFwiTW9zdHJhbmRvIGRlbCAwIGFsIDAgZGUgMCByZWdpc3Ryb3NcIixcclxuICAgICAgICAgICAgICAgIFwiaW5mb0ZpbHRlcmVkXCI6IFwiKGZpbHRyYWRvIGRlIHVuIHRvdGFsIGRlIF9NQVhfIHJlZ2lzdHJvcylcIixcclxuICAgICAgICAgICAgICAgIFwic2VhcmNoXCI6IFwiQnVzY2FyOlwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0aG91c2FuZHNcIjogXCIsXCIsXHJcbiAgICAgICAgICAgICAgICBcImxvYWRpbmdSZWNvcmRzXCI6IFwiQ2FyZ2FuZG8uLi5cIixcclxuICAgICAgICAgICAgICAgIFwicGFnaW5hdGVcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZmlyc3RcIjogXCJQcmltZXJvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJsYXN0XCI6IFwiw5psdGltb1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmV4dFwiOiBcIlNpZ3VpZW50ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicHJldmlvdXNcIjogXCJBbnRlcmlvclwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCJhcmlhXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBcInNvcnRBc2NlbmRpbmdcIjogXCI6IEFjdGl2YXIgcGFyYSBvcmRlbmFyIGxhIGNvbHVtbmEgZGUgbWFuZXJhIGFzY2VuZGVudGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcInNvcnREZXNjZW5kaW5nXCI6IFwiOiBBY3RpdmFyIHBhcmEgb3JkZW5hciBsYSBjb2x1bW5hIGRlIG1hbmVyYSBkZXNjZW5kZW50ZVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5GaWx0ZXJHbG9iYWwodGFibGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGFibGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBGaWx0ZXJHbG9iYWwodGFibGU6IERhdGFUYWJsZXMuQXBpKSB7XHJcblxyXG4gICAgICAgICQoXCJpbnB1dCNnbG9iYWxfZmlsdGVyXCIpLm9uKFwia2V5dXAgY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0YWJsZS5zZWFyY2goJChcIiNnbG9iYWxfZmlsdGVyXCIpLnZhbCgpLnRvU3RyaW5nKCksICQoXCIjZ2xvYmFsX3JlZ2V4XCIpLnByb3AoXCJjaGVja2VkXCIpLCAkKFwiI2dsb2JhbF9zbWFydFwiKS5wcm9wKFwiY2hlY2tlZFwiKSkuZHJhdygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKFwiaW5wdXQuY29sdW1uX2ZpbHRlclwiKS5vbihcImtleXVwIGNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IGNvbHVtbiA9ICQodGhpcykucGFyZW50cyhcInRyXCIpLmF0dHIoXCJkYXRhLWNvbHVtblwiKTtcclxuXHJcbiAgICAgICAgICAgIHRhYmxlLmNvbHVtbihjb2x1bW4pXHJcbiAgICAgICAgICAgICAgICAuc2VhcmNoKFxyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjY29sXCIgKyBjb2x1bW4gKyBcIl9maWx0ZXJcIikudmFsKCkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2NvbFwiICsgY29sdW1uICsgXCJfcmVnZXhcIikucHJvcChcImNoZWNrZWRcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNjb2xcIiArIGNvbHVtbiArIFwiX3NtYXJ0XCIpLnByb3AoXCJjaGVja2VkXCIpXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuZHJhdygpXHJcbiAgICAgICAgfSk7ICAgXHJcbiAgICB9XHJcblxyXG59IiwiZXhwb3J0IGNsYXNzIENvbmZpcm1Nb2RhbE1lc3NhZ2Uge1xyXG5cclxuICAgIHByaXZhdGUgcGFyZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgbW9kYWw6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBhY2NlcHRCdXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBkaXNtaXNzQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByaXZhdGUgbW9kYWxJbnN0YW5jZTogTS5Nb2RhbDtcclxuICAgIHByaXZhdGUgaWRNZXNzc2FnZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0aXRsZTogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcsXHJcbiAgICAgICAgcHVibGljIGFjY2VwdFRleHQ6IHN0cmluZyxcclxuICAgICAgICBwdWJsaWMgZGlzbWlzc1RleHQ6IHN0cmluZykge1xyXG5cclxuICAgICAgICB0aGlzLmlkTWVzc3NhZ2UgPSBcImNvbmZpcm0tbWVzc2FnZVwiO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gZG9jdW1lbnQuYm9keTtcclxuICAgICAgICB0aGlzLkNyZWF0ZU1vZGFsKCk7XHJcbiAgICAgICAgdGhpcy5BcHBlbmRNb2RlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQ3JlYXRlTW9kYWwoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5tb2RhbC5pZCA9IHRoaXMuaWRNZXNzc2FnZTtcclxuICAgICAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbFwiLCBcIm1vZGFsLWZpeGVkLWZvb3RlclwiLCBcIm1vZGFsLWNvbmZpcm0tbWVzc2FnZS1zbWFsbFwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgY29udGVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWwtY29udGVudFwiKTtcclxuICAgICAgICB0aGlzLm1vZGFsLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDVcIik7XHJcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gdGhpcy50aXRsZTtcclxuICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGhlYWRlcik7XHJcblxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBtZXNzYWdlLnRleHRDb250ZW50ID0gdGhpcy5tZXNzYWdlO1xyXG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobWVzc2FnZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBidXR0b25Hcm91cC5jbGFzc0xpc3QuYWRkKFwibW9kYWwtZm9vdGVyXCIpO1xyXG4gICAgICAgIHRoaXMubW9kYWwuYXBwZW5kQ2hpbGQoYnV0dG9uR3JvdXApO1xyXG5cclxuICAgICAgICB0aGlzLmRpc21pc3NCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuZGlzbWlzc0J1dHRvbi5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICAgICAgICBcIm1vZGFsLWFjdGlvblwiLFxyXG4gICAgICAgICAgICBcIndhdmVzLWVmZmVjdFwiLFxyXG4gICAgICAgICAgICBcIndhdmVzLXJlZFwiLFxyXG4gICAgICAgICAgICBcImJ0bi1mbGF0XCIsXHJcbiAgICAgICAgICAgIFwiYnRuLW9yYW5nZVwiXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmRpc21pc3NCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XHJcbiAgICAgICAgdGhpcy5kaXNtaXNzQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5kaXNtaXNzVGV4dDtcclxuICAgICAgICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZCh0aGlzLmRpc21pc3NCdXR0b24pO1xyXG5cclxuICAgICAgICB0aGlzLmFjY2VwdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgdGhpcy5hY2NlcHRCdXR0b24uY2xhc3NMaXN0LmFkZChcclxuICAgICAgICAgICAgXCJtb2RhbC1hY3Rpb25cIixcclxuICAgICAgICAgICAgXCJ3YXZlcy1lZmZlY3RcIixcclxuICAgICAgICAgICAgXCJ3YXZlcy1yZWRcIixcclxuICAgICAgICAgICAgXCJidG4tZmxhdFwiLFxyXG4gICAgICAgICAgICBcImJ0bi1vcmFuZ2VcIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5hY2NlcHRCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XHJcbiAgICAgICAgdGhpcy5hY2NlcHRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLmFjY2VwdFRleHQ7XHJcbiAgICAgICAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5hY2NlcHRCdXR0b24pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQXBwZW5kTW9kZWwoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5tb2RhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxJbnN0YW5jZS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyB0aGlzLmlkTWVzc3NhZ2UpO1xyXG4gICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgQ29uZmlybSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc29tZXRoaW5nV2VudFdyb25nVXBvbkNyZWF0aW9uID1cclxuICAgICAgICAgICAgICAgICF0aGlzLm1vZGFsIHx8ICF0aGlzLmFjY2VwdEJ1dHRvbiB8fCAhdGhpcy5kaXNtaXNzQnV0dG9uO1xyXG4gICAgICAgICAgICBpZiAoc29tZXRoaW5nV2VudFdyb25nVXBvbkNyZWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIkZhbGxvIGFsZ28gZW4gbGEgY3JlYWNpw7NuIGRlbCBtZW5zYWplXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBNLk1vZGFsLmluaXQodGhpcy5tb2RhbCwge1xyXG4gICAgICAgICAgICAgICAgZGlzbWlzc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogLjUsXHJcbiAgICAgICAgICAgICAgICBpbkR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgICAgICAgICBvdXREdXJhdGlvbjogMjAwLFxyXG4gICAgICAgICAgICAgICAgc3RhcnRpbmdUb3A6ICc2JScsXHJcbiAgICAgICAgICAgICAgICBlbmRpbmdUb3A6ICc4JSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxJbnN0YW5jZSA9IE0uTW9kYWwuZ2V0SW5zdGFuY2UodGhpcy5tb2RhbCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kYWxJbnN0YW5jZS5vcGVuKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFjY2VwdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlzbWlzc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCIvLyBCYXNlIGNsYXNzIGZvciBIdHRwIG9wZXJhdGlvbnMgR0VULCBQVVQsIFBPU1QsIERFTEVURSwgUEFUQ0ghIVxyXG5leHBvcnQgY2xhc3MgSHR0cEZldGNoU2VydmljZSB7XHJcblxyXG4gICAgcHVibGljIFBvc3Q8VT4odXJsOiBzdHJpbmcsIHBheWxvYWQ6IGFueSwganNvblJlc3BvbnNlID0gdHJ1ZSk6IFByb21pc2U8VT4ge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxVPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiAoanNvblJlc3BvbnNlKSA/IHJlc3BvbnNlLmpzb24oKSA6IHJlc3BvbnNlLnRleHQoKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFBvc3RGb3JtPFU+KHVybDogc3RyaW5nLCBwYXlsb2FkOiBhbnksIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPFU+IHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8VT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuJzogdG9rZW59LFxyXG4gICAgICAgICAgICAgICAgYm9keTogcGF5bG9hZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUG9zdEZvcm1VUkw8VT4odXJsOiBzdHJpbmcsIHBheWxvYWQ6IGFueSwganNvblJlc3BvbnNlID0gdHJ1ZSk6IFByb21pc2U8VT4ge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxVPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IHBheWxvYWRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IChqc29uUmVzcG9uc2UpID8gcmVzcG9uc2UuanNvbigpIDogcmVzcG9uc2UudGV4dCgpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEh0dHBGZXRjaFNlcnZpY2UgfSBmcm9tIFwiLi9IdHRwRmV0Y2hTZXJ2aWNlXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VydmljZXMgPSBbSHR0cEZldGNoU2VydmljZV07XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9IdHRwRmV0Y2hTZXJ2aWNlXCI7IiwiZXhwb3J0IGNsYXNzIEFyZWEge1xyXG4gICAgSWRBcmVhOiBzdHJpbmc7XHJcbiAgICBOb21icmU6IHN0cmluZztcclxufSIsImV4cG9ydCBjbGFzcyBDYWJlem90ZSB7XHJcbiAgICBQbGFjYTogc3RyaW5nO1xyXG59IiwiZXhwb3J0IGNsYXNzIENvbmR1Y3RvciB7XHJcbiAgICBOb21icmU6IHN0cmluZztcclxuICAgIENlZHVsYTogc3RyaW5nO1xyXG59IiwiZXhwb3J0IGNsYXNzIExpbmVhIHtcclxuICAgIExpbmVhOiBzdHJpbmc7XHJcbiAgICBUZXJtaW5hbDogc3RyaW5nO1xyXG4gICAgUHJvZHVjdG86IHN0cmluZztcclxuICAgIEVzdGFkbzogc3RyaW5nO1xyXG4gICAgVm9sdW1lbjogbnVtYmVyO1xyXG4gICAgRGVuc2lkYWQ6IG51bWJlcjtcclxuICAgIE9ic2VydmFjaW9uZXM6IHN0cmluZztcclxufSIsImV4cG9ydCBjbGFzcyBMb2cge1xyXG4gICAgSWQ6IHN0cmluZztcclxuICAgIEZlY2hhRXZlbnRvOiBzdHJpbmc7XHJcbiAgICBBcGxpY2FjaW9uOiBzdHJpbmdcclxuICAgIEFyZWE6IHN0cmluZ1xyXG4gICAgU2VjY2lvbjogc3RyaW5nXHJcbiAgICBBY2Npb246IHN0cmluZ1xyXG4gICAgT2JqZXRpdm86IHN0cmluZ1xyXG4gICAgRW50aWRhZDogc3RyaW5nXHJcbiAgICBQcmlvcmlkYWQ6IHN0cmluZ1xyXG4gICAgQ29tZW50YXJpbzogc3RyaW5nXHJcbn0iLCJleHBvcnQgY2xhc3MgVHJhaWxlciB7XHJcbiAgICBQbGFjYTogc3RyaW5nO1xyXG59IiwiZXhwb3J0IGNsYXNzIFVzdWFyaW8ge1xyXG4gICAgSW1hZ2VuOiBGaWxlO1xyXG4gICAgSWRVc3VhcmlvOiBzdHJpbmc7XHJcbiAgICBOb21icmU6IHN0cmluZztcclxuICAgIFJvbDogc3RyaW5nO1xyXG4gICAgRW1haWw6IHN0cmluZztcclxuICAgIFRlbGVmb25vOiBzdHJpbmc7XHJcbn0iLCJpbXBvcnQgeyBJTWVzc2FnZVJlc3BvbnNlIH0gZnJvbSBcIi4vTWVzc2FnZVJlc3BvbnNlXCI7XHJcbmltcG9ydCB7IFVzdWFyaW8gfSBmcm9tIFwiLi9Vc3VhcmlvXCI7XHJcbmltcG9ydCB7IENhYmV6b3RlIH0gZnJvbSBcIi4vQ2FiZXpvdGVcIjtcclxuaW1wb3J0IHsgVHJhaWxlciB9IGZyb20gXCIuL1RyYWlsZXJcIjtcclxuaW1wb3J0IHsgQ29uZHVjdG9yIH0gZnJvbSBcIi4vQ29uZHVjdG9yXCI7XHJcbmltcG9ydCB7IEFyZWEgfSBmcm9tIFwiLi9BcmVhXCI7XHJcbmltcG9ydCB7IExvZyB9IGZyb20gXCIuL0xvZ1wiO1xyXG5pbXBvcnQgeyBMaW5lYSB9IGZyb20gXCIuL0xpbmVhXCI7XHJcblxyXG5leHBvcnQgY29uc3QgbW9kZWxzID0gW1VzdWFyaW8sIENhYmV6b3RlLCBUcmFpbGVyLCBDb25kdWN0b3IsIEFyZWEsIExvZywgTGluZWFdO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vTWVzc2FnZVJlc3BvbnNlXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL1VzdWFyaW9cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vQ2FiZXpvdGVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vVHJhaWxlclwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9Db25kdWN0b3JcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vQXJlYVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9Mb2dcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vTGluZWFcIjsiLCJkZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIG9uKGV2ZW50VHlwZTogc3RyaW5nLCBjaGlsZFNlbGVjdG9yOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogYW55KTogdm9pZDtcclxuICAgIH1cclxufVxyXG5cclxuSFRNTEVsZW1lbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50VHlwZTogc3RyaW5nLCBjaGlsZFNlbGVjdG9yOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudE9uRWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50T25FbGVtZW50LnRhcmdldC5tYXRjaGVzKGNoaWxkU2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudE9uRWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnRPbkVsZW1lbnQudGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgeyB9OyIsImV4cG9ydCBjbGFzcyBKUVZhbGlkYXRpb25zIHtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIE1heEZpbGVTaXplVmFsaWRhdGlvbigpOiB2b2lkIHtcclxuICAgICAgICBpZiAoJC52YWxpZGF0b3IubWV0aG9kc1snbWF4ZmlsZXNpemUnXSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAkLnZhbGlkYXRvci5hZGRNZXRob2QoJ21heGZpbGVzaXplJywgZnVuY3Rpb24gKHZhbHVlLCBlbGVtZW50LCBwYXJhbXMpIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0ID0gKGVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIGxldCBzaXplID0gcGFyYW1zLCBmaWxlID0gKGlucHV0LmZpbGVzWzBdIGFzIEZpbGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoZmlsZS5zaXplIC8gMTAyNCkgPiBzaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkLnZhbGlkYXRvci51bm9idHJ1c2l2ZS5hZGFwdGVycy5hZGQoJ21heGZpbGVzaXplJywgWydzaXplJ10sIGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZWdpc3RyYSBtYXhmaWxlc2l6ZSBlbiB1bm9idHJ1c2l2ZVwiKTtcclxuICAgICAgICAgICAgb3B0aW9ucy5ydWxlc1snbWF4ZmlsZXNpemUnXSA9IG9wdGlvbnMucGFyYW1zWydzaXplJ107XHJcbiAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZXNbJ21heGZpbGVzaXplJ10gPSBvcHRpb25zLm1lc3NhZ2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBBbGxvd2VkRXh0ZW5zaW9uc1ZhbGlkYXRpb24oKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCQudmFsaWRhdG9yLm1ldGhvZHNbJ2FsbG93ZWRleHRlbnNpb25zJ10pXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgJC52YWxpZGF0b3IuYWRkTWV0aG9kKCdhbGxvd2VkZXh0ZW5zaW9ucycsIGZ1bmN0aW9uICh2YWx1ZSwgZWxlbWVudCwgcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dCA9IChlbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgICAgICBsZXQgZXh0cyA9IHBhcmFtcywgZmlsZSA9IChpbnB1dC5maWxlc1swXSBhcyBGaWxlKTtcclxuICAgICAgICAgICAgbGV0IGV4dHNBcnJheSA9IGV4dHMuc3BsaXQoJywnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKG5ldyBSZWdFeHAoJygnICsgZXh0c0FycmF5LmpvaW4oJ3wnKS5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJykgKyAnKSQnKSkudGVzdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJC52YWxpZGF0b3IudW5vYnRydXNpdmUuYWRhcHRlcnMuYWRkKCdhbGxvd2VkZXh0ZW5zaW9ucycsIFsnZXh0cyddLCBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBvcHRpb25zLnJ1bGVzWydhbGxvd2VkZXh0ZW5zaW9ucyddID0gb3B0aW9ucy5wYXJhbXNbJ2V4dHMnXTtcclxuICAgICAgICAgICAgb3B0aW9ucy5tZXNzYWdlc1snYWxsb3dlZGV4dGVuc2lvbnMnXSA9IG9wdGlvbnMubWVzc2FnZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImV4cG9ydCAqIGZyb20gJy4vSHR0cCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vTW9kZWxzJztcclxuZXhwb3J0ICogZnJvbSAnLi9VdGlscy9IVE1MRXh0ZW5zaW9ucyc7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBtb2R1bGUgZXhwb3J0cyBtdXN0IGJlIHJldHVybmVkIGZyb20gcnVudGltZSBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5yZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vU2NyaXB0cy9QYWdlcy9UcmFpbGVycy9UcmFpbGVycy50c1wiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=